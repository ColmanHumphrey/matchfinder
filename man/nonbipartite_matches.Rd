% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/nonbipartite_matches.R
\name{nonbipartite_matches}
\alias{nonbipartite_matches}
\title{Generating nonbipartite matched pairs}
\usage{
nonbipartite_matches(
  dist_mat,
  tolerance_list = gen_tolerance_list(),
  match_method = c("with_replacement", "optimal", "greedy"),
  n_sinks = NULL,
  keep_all_with_replacement = FALSE,
  weight_vec = NULL
)
}
\arguments{
\item{dist_mat}{Matrix of pairwise distances.}

\item{tolerance_list}{See \code{gen_tolerance_list}}

\item{match_method}{This enum corresponds to the three matching methods
discussed above:
\describe{
\item{"with_replacement"}{Finds smallest control for each treatment}
\item{"greedy"}{Greedily generates pairs. Note that
the order for choosing the greedy pairs is random, which is not the only
possible solution.}
\item{"optimal"}{Minimum total distance}
}}

\item{n_sinks}{Vector of sinks per match. Note that this is NOT the same
for each \code{match_method}: for both \code{"with_replacement"}
and \code{"greedy"}, it subtracts one pair. But for optimal matching,
it removes one full unit. \code{"greedy"} is the weird one here, but it
wouldn't truly make sense given the code to try and replicate the optimal
implementation. Be safe and don't use greedy...}

\item{keep_all_with_replacement}{logical, default FALSE.
When nbp matching with replacement, you can in some cases form nearly
as many pairs as there are units (if using a tolerance vec, then maybe not
the lowest value pairs, since they'll have no control unit).
But this would form a contrast with all other methods, so we will cut
down to using half by default.}

\item{weight_vec}{Default \code{NULL}: optionally supply the weight vector
used to generate \code{dist_mat} and it'll be returned in the
\code{match_list} generated from this function}
}
\value{
basic return value is a list with three elements:
\describe{
\item{\code{treat_index}}{index of treated units}
\item{\code{control_index}}{index of control units}
\item{\code{distance}}{distances between the pairs}
}
You'll get a list of such objects, each
with an extra element: the number of sinks used.
If \code{n_sinks} is NULL, it'll default to using a
single value: zero.
}
\description{
Generates matched pairs either:
\describe{
\item{With Replacement}{Finds smallest control for each treatment}
\item{Without Replacement, Greedy}{Greedily generates pairs. Note that
the order for choosing the greedy pairs is random, which is not the only
possible solution.}
\item{Without Replacement, Optimally}{Minimum total distance}
}
If you're happy to allow units to be the control multiple times,
then the first way is fast and optimal.
If not, you have to trade off speed vs optimality. Greedy runs
over all units in a random order, so if you want to run greedy a bunch of
times and take the best, it would still be (likely) much faster than
running optimal matching.
}
\details{
NOTE:
with sinks -
the optimal match gives "half" the number of sinks you might expect.
If you have a pool of 400 matchable things,
NBP gives you 200 matches if no sinks.
If you say sinks = 20 FOR OPTIMAL,
you'll get 190 matches, not 180.
We leave this behaviour in so that this algorithm
can generate expected results if someone is used to nbpmatch
Further, note that we don't allow equality on the tolerance vector
if used.
}
\author{
Colman Humphrey
}
