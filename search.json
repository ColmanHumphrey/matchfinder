[{"path":"/LICENSE.html","id":"gnu-lesser-general-public-license","dir":"","previous_headings":"","what":"GNU LESSER GENERAL PUBLIC LICENSE","title":"NA","text":"Version 2.1, February 1999","code":"Copyright (C) 1991, 1999 Free Software Foundation, Inc. 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA  Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.  [This is the first released version of the Lesser GPL.  It also counts  as the successor of the GNU Library Public License, version 2, hence  the version number 2.1.]"},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"NA","text":"licenses software designed take away freedom share change . contrast, GNU General Public Licenses intended guarantee freedom share change free software–make sure software free users. license, Lesser General Public License, applies specially designated software packages–typically libraries–Free Software Foundation authors decide use . can use , suggest first think carefully whether license ordinary General Public License better strategy use particular case, based explanations . speak free software, referring freedom use, price. General Public Licenses designed make sure freedom distribute copies free software (charge service wish); receive source code can get want ; can change software use pieces new free programs; informed can things. protect rights, need make restrictions forbid distributors deny rights ask surrender rights. restrictions translate certain responsibilities distribute copies library modify . example, distribute copies library, whether gratis fee, must give recipients rights gave . must make sure , , receive can get source code. link code library, must provide complete object files recipients, can relink library making changes library recompiling . must show terms know rights. protect rights two-step method: (1) copyright library, (2) offer license, gives legal permission copy, distribute /modify library. protect distributor, want make clear warranty free library. Also, library modified someone else passed , recipients know original version, original author’s reputation affected problems might introduced others. Finally, software patents pose constant threat existence free program. wish make sure company effectively restrict users free program obtaining restrictive license patent holder. Therefore, insist patent license obtained version library must consistent full freedom use specified license. GNU software, including libraries, covered ordinary GNU General Public License. license, GNU Lesser General Public License, applies certain designated libraries, quite different ordinary General Public License. use license certain libraries order permit linking libraries non-free programs. program linked library, whether statically using shared library, combination two legally speaking combined work, derivative original library. ordinary General Public License therefore permits linking entire combination fits criteria freedom. Lesser General Public License permits lax criteria linking code library. call license “Lesser” General Public License Less protect user’s freedom ordinary General Public License. also provides free software developers Less advantage competing non-free programs. disadvantages reason use ordinary General Public License many libraries. However, Lesser license provides advantages certain special circumstances. example, rare occasions, may special need encourage widest possible use certain library, becomes de-facto standard. achieve , non-free programs must allowed use library. frequent case free library job widely used non-free libraries. case, little gain limiting free library free software , use Lesser General Public License. cases, permission use particular library non-free programs enables greater number people use large body free software. example, permission use GNU C Library non-free programs enables many people use whole GNU operating system, well variant, GNU/Linux operating system. Although Lesser General Public License Less protective users’ freedom, ensure user program linked Library freedom wherewithal run program using modified version Library. precise terms conditions copying, distribution modification follow. Pay close attention difference “work based library” “work uses library”. former contains code derived library, whereas latter must combined library order run.","code":""},{"path":"/LICENSE.html","id":"terms-and-conditions-for-copying-distribution-and-modification","dir":"","previous_headings":"","what":"TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION","title":"NA","text":"0. License Agreement applies software library program contains notice placed copyright holder authorized party saying may distributed terms Lesser General Public License (also called “License”). licensee addressed “”. “library” means collection software functions /data prepared conveniently linked application programs (use functions data) form executables. “Library”, , refers software library work distributed terms. “work based Library” means either Library derivative work copyright law: say, work containing Library portion , either verbatim modifications /translated straightforwardly another language. (Hereinafter, translation included without limitation term “modification”.) “Source code” work means preferred form work making modifications . library, complete source code means source code modules contains, plus associated interface definition files, plus scripts used control compilation installation library. Activities copying, distribution modification covered License; outside scope. act running program using Library restricted, output program covered contents constitute work based Library (independent use Library tool writing ). Whether true depends Library program uses Library . 1. may copy distribute verbatim copies Library’s complete source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice disclaimer warranty; keep intact notices refer License absence warranty; distribute copy License along Library. may charge fee physical act transferring copy, may option offer warranty protection exchange fee. 2. may modify copy copies Library portion , thus forming work based Library, copy distribute modifications work terms Section 1 , provided also meet conditions: ) modified work must software library. b) must cause files modified carry prominent notices stating changed files date change. c) must cause whole work licensed charge third parties terms License. d) facility modified Library refers function table data supplied application program uses facility, argument passed facility invoked, must make good faith effort ensure , event application supply function table, facility still operates, performs whatever part purpose remains meaningful. (example, function library compute square roots purpose entirely well-defined independent application. Therefore, Subsection 2d requires application-supplied function table used function must optional: application supply , square root function must still compute square roots.) requirements apply modified work whole. identifiable sections work derived Library, can reasonably considered independent separate works , License, terms, apply sections distribute separate works. distribute sections part whole work based Library, distribution whole must terms License, whose permissions licensees extend entire whole, thus every part regardless wrote . Thus, intent section claim rights contest rights work written entirely ; rather, intent exercise right control distribution derivative collective works based Library. addition, mere aggregation another work based Library Library (work based Library) volume storage distribution medium bring work scope License. 3. may opt apply terms ordinary GNU General Public License instead License given copy Library. , must alter notices refer License, refer ordinary GNU General Public License, version 2, instead License. (newer version version 2 ordinary GNU General Public License appeared, can specify version instead wish.) make change notices. change made given copy, irreversible copy, ordinary GNU General Public License applies subsequent copies derivative works made copy. option useful wish copy part code Library program library. 4. may copy distribute Library (portion derivative , Section 2) object code executable form terms Sections 1 2 provided accompany complete corresponding machine-readable source code, must distributed terms Sections 1 2 medium customarily used software interchange. distribution object code made offering access copy designated place, offering equivalent access copy source code place satisfies requirement distribute source code, even though third parties compelled copy source along object code. 5. program contains derivative portion Library, designed work Library compiled linked , called “work uses Library”. work, isolation, derivative work Library, therefore falls outside scope License. However, linking “work uses Library” Library creates executable derivative Library (contains portions Library), rather “work uses library”. executable therefore covered License. Section 6 states terms distribution executables. “work uses Library” uses material header file part Library, object code work may derivative work Library even though source code . Whether true especially significant work can linked without Library, work library. threshold true precisely defined law. object file uses numerical parameters, data structure layouts accessors, small macros small inline functions (ten lines less length), use object file unrestricted, regardless whether legally derivative work. (Executables containing object code plus portions Library still fall Section 6.) Otherwise, work derivative Library, may distribute object code work terms Section 6. executables containing work also fall Section 6, whether linked directly Library . 6. exception Sections , may also combine link “work uses Library” Library produce work containing portions Library, distribute work terms choice, provided terms permit modification work customer’s use reverse engineering debugging modifications. must give prominent notice copy work Library used Library use covered License. must supply copy License. work execution displays copyright notices, must include copyright notice Library among , well reference directing user copy License. Also, must one things: ) Accompany work complete corresponding machine-readable source code Library including whatever changes used work (must distributed Sections 1 2 ); , work executable linked Library, complete machine-readable “work uses Library”, object code /source code, user can modify Library relink produce modified executable containing modified Library. (understood user changes contents definitions files Library necessarily able recompile application use modified definitions.) b) Use suitable shared library mechanism linking Library. suitable mechanism one (1) uses run time copy library already present user’s computer system, rather copying library functions executable, (2) operate properly modified version library, user installs one, long modified version interface-compatible version work made . c) Accompany work written offer, valid least three years, give user materials specified Subsection 6a, , charge cost performing distribution. d) distribution work made offering access copy designated place, offer equivalent access copy specified materials place. e) Verify user already received copy materials already sent user copy. executable, required form “work uses Library” must include data utility programs needed reproducing executable . However, special exception, materials distributed need include anything normally distributed (either source binary form) major components (compiler, kernel, ) operating system executable runs, unless component accompanies executable. may happen requirement contradicts license restrictions proprietary libraries normally accompany operating system. contradiction means use Library together executable distribute. 7. may place library facilities work based Library side--side single library together library facilities covered License, distribute combined library, provided separate distribution work based Library library facilities otherwise permitted, provided two things: ) Accompany combined library copy work based Library, uncombined library facilities. must distributed terms Sections . b) Give prominent notice combined library fact part work based Library, explaining find accompanying uncombined form work. 8. may copy, modify, sublicense, link , distribute Library except expressly provided License. attempt otherwise copy, modify, sublicense, link , distribute Library void, automatically terminate rights License. However, parties received copies, rights, License licenses terminated long parties remain full compliance. 9. required accept License, since signed . However, nothing else grants permission modify distribute Library derivative works. actions prohibited law accept License. Therefore, modifying distributing Library (work based Library), indicate acceptance License , terms conditions copying, distributing modifying Library works based . 10. time redistribute Library (work based Library), recipient automatically receives license original licensor copy, distribute, link modify Library subject terms conditions. may impose restrictions recipients’ exercise rights granted herein. responsible enforcing compliance third parties License. 11. , consequence court judgment allegation patent infringement reason (limited patent issues), conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. distribute satisfy simultaneously obligations License pertinent obligations, consequence may distribute Library . example, patent license permit royalty-free redistribution Library receive copies directly indirectly , way satisfy License refrain entirely distribution Library. portion section held invalid unenforceable particular circumstance, balance section intended apply, section whole intended apply circumstances. purpose section induce infringe patents property right claims contest validity claims; section sole purpose protecting integrity free software distribution system implemented public license practices. Many people made generous contributions wide range software distributed system reliance consistent application system; author/donor decide willing distribute software system licensee impose choice. section intended make thoroughly clear believed consequence rest License. 12. distribution /use Library restricted certain countries either patents copyrighted interfaces, original copyright holder places Library License may add explicit geographical distribution limitation excluding countries, distribution permitted among countries thus excluded. case, License incorporates limitation written body License. 13. Free Software Foundation may publish revised /new versions Lesser General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Library specifies version number License applies “later version”, option following terms conditions either version later version published Free Software Foundation. Library specify license version number, may choose version ever published Free Software Foundation. 14. wish incorporate parts Library free programs whose distribution conditions incompatible , write author ask permission. software copyrighted Free Software Foundation, write Free Software Foundation; sometimes make exceptions . decision guided two goals preserving free status derivatives free software promoting sharing reuse software generally. WARRANTY 15. LIBRARY LICENSED FREE CHARGE, WARRANTY LIBRARY, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE LIBRARY “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE LIBRARY . LIBRARY PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION. 16. EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MAY MODIFY /REDISTRIBUTE LIBRARY PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE LIBRARY (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE LIBRARY OPERATE SOFTWARE), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-libraries","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Libraries","title":"NA","text":"develop new library, want greatest possible use public, recommend making free software everyone can redistribute change. can permitting redistribution terms (, alternatively, terms ordinary General Public License). apply terms, attach following notices library. safest attach start source file effectively convey exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. also get employer (work programmer) school, , sign “copyright disclaimer” library, necessary. sample; alter names: ’s !","code":"one line to give the library's name and an idea of what it does. Copyright (C) year  name of author  This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.  This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.  You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA Yoyodyne, Inc., hereby disclaims all copyright interest in the library `Frob' (a library for tweaking knobs) written by James Random Hacker.  signature of Ty Coon, 1 April 1990 Ty Coon, President of Vice"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Colman Humphrey. Author. Ryan Gross. Contributor, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Humphrey C (2022). matchfinder: Finding Best Matches Based Predictability. R package version 0.0.1, https://colmanhumphrey.github.io/matchfinder/.","code":"@Manual{,   title = {matchfinder: Finding Best Matches Based on Predictability},   author = {Colman Humphrey},   year = {2022},   note = {R package version 0.0.1},   url = {https://colmanhumphrey.github.io/matchfinder/}, }"},{"path":"/index.html","id":"matchfinder","dir":"","previous_headings":"","what":"Finding Best Matches Based on Predictability","title":"Finding Best Matches Based on Predictability","text":"matchfinder finding best matches based predictability. general idea: given match bad can predict units treated control.","code":""},{"path":"/index.html","id":"main-concept","dir":"","previous_headings":"","what":"Main Concept","title":"Finding Best Matches Based on Predictability","text":"First let’s discuss case matched pairs: set T treatment units C control units, total N = T + C units pair consists one treated unit one control unit Typically restrict treated unit show pairs Optionally can restrict control units way may leave many original units groups units, resulting matched treated units, resulting matched control units, shouldn’t differ systematically, reduce bias units within pair similar, reduce variance However, isn’t enough evaluate group-level statistics bias part: say variable x pairs (treated, control), takes values (0, 1), (1, 2), (2, 3) (3, 0), 25% time. variable group-level statistics treated control units, ’s clear pattern data. x non-linear effect outcome, bias results. given half pairs, along relevant info pairs (values x, unit treated etc), quickly learn pattern given easily predict unit treated looking half. means ’s easy predict units treated units, match bad.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Finding Best Matches Based on Predictability","text":"’re yet CRAN, can install github devtools remotes:","code":"## install.packages(\"devtools\") devtools::install_github(\"ColmanHumphrey/matchfinder\")  ## OR:  ## install.packages(\"remotes\") remotes::install_github(\"ColmanHumphrey/matchfinder\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Finding Best Matches Based on Predictability","text":"’ll work two small examples, one bipartite, one non-bipartite.","code":""},{"path":"/index.html","id":"bipartite","dir":"","previous_headings":"Example","what":"Bipartite","title":"Finding Best Matches Based on Predictability","text":"First ’ll load library setup data: Next let’s compute covariance matrix (distance matrix). Note covariance_with_ranks allows us specify columns used rank level desired. generate random weight vectors: idea ’ll end using one gave us best match. don’t use function, just reasonble features generating random vectors, including setting minimum weights, prior weights etc. ’re generating 25 , serious go things, ’d probably want closer 1,000. ’ll now generate many matches. try two different sink values; general can either try many , increase get desired randomness match. ’ll two ways. Firstly, two steps explicitly: Generate matches Compute Brier score match can call brier_bipartite_matches, performs steps us: indeed ’re identical terms matches: Brier scores however won’t , since ’re based random draws split training testing. Note default, prediction method used xgboost. may want change . brier_score (therefore brier_score_cv) brier_[non]bipartite_matches take parameter match_predict_function, default result calling match_predict_xgb(): match_predict_xgb defaults (defaults defaults!). generates function takes one parameter, train_test_list; match_predict_function expected . See match_predict_xgb match_predict_linear details. take parameters, can adjusted preference: ’re happy xgboost just want change parameters, just call match_predict_xgb desired params: need flexibility (e.g. want change objective = \"binary:logistic\" anything), functions produced match_predict_xgb aren’t complex, can build manually want simpler linear model - either logistic (glm) actually linear (lm), pass match_predict_linear(use_linear_lm = FALSE) # true!. ’ll default glm; use lm, pass use_linear_lm = TRUE. totally custom prediction function, internals either make clear ’s happening Anyway, now matches want choose one ! given number sinks, can default using hardest predict match: match largest Brier score. two things left consider: - given number sinks, even choose best, good resulting match? Close random, still highly separable / easy predict? - best match per sink number, match actually go ? number sinks appropriate? corresponding paper goes detail, essentially score match based permutation test. theory just check Brier score 0.25 , ignores many factors including overfitting behaviour chosen prediction function. permutation test: - take given match - iteration: randomly choose labelling pair (.e. randomly choose treated vs control) - run prediction algorithm record resulting Brier score - “large number” times - permutation score many permutation Briers match’s answers questions: - can now effectively judge match non-relative level - choose number sinks first gives us acceptable permutation score (going beyond throwing data away higher variance actual result) Let’s now calculate permutation score. , course used two named elements brier_wr_matches either: ’s useful (necessary) use purrr results, let’s load : resulting object two named elements: permutation_brier_scores: list shape all_wr_matches wr_briers: , list element per sink, result per match (case just list vectors). Let’s look now (random run; ’ll different results): n_sinks : somewhat simple , try map(perm_results$best_matches,   \"n_sinks\") map_int want get spooky raw_brier: raw Brier score input match. already inputted data generated result wr_briers. can see lapply(wr_briers, max) vs map(perm_results$best_matches, \"raw_brier\") permutation_brier: result running permutation Briers counting many scores actual Brier. default process actually run Brier scoring best outcome, ’ll best raw Brier also gives best permutation Brier, doesn’t true general. Hence lapply(wr_briers, .max) matches lapply(perm_results$permutation_brier_scores, .min). match_list: original match inputted permutation_matches! Let’s look 30 second: best_30_index <- .max(wr_briers[[\"30\"]]). ’ll see perm_results$best_matches[[\"30\"]]$match_list identical input all_wr_matches[[\"30\"]][[best_30_index]]. whole distribution permutation scores available us can handy, case ’re worried got weird outlier etc. example, case get following results: contrast, drawing histogram can reveal ’s really happening: ’s output four best matches: simple regression, y ~ treatment_vector, gives estimate 0.57579 standard error 0.12375. case, full regression y ~ treatment_vector + X nearly optimal (know generated data), gives estimate 0.43776 standard error 0.08504. see?","code":"library(matchfinder)  treat_effect <- 0.3  rows <- 600L num_weight_vecs <- 25L x_mat <- cbind(rnorm(rows),                runif(rows)) treat_vec <- (1L:rows) %in%     sample(1L:rows, size = floor(rows * 0.45),            prob = (x_mat[, 2] + 2) / 5) y_vector <- x_mat[, 1] + x_mat[, 2] + treat_vec * treat_effect + rnorm(rows) cov_x <- covariance_with_ranks(x_mat)  ## we don't use this, just showing how it's done ## under the hood within the higher-level functions ## or if you wanted to call `bipartite_matches` directly dist_mat <- weighted_mahal(x_mat,     cov_x = cov_x,     weight_vec = c(0.66, 0.33),     treat_vec = treat_vec ) weight_vecs <- generate_random_weights(     prior_weights = c(2, 1),     number_vectors = num_weight_vecs,     minimum_weights = c(0.1, 0.1) ) ## 1. Here we generate all the matches: one for each pair ##    of weight vector and sink value all_wr_matches <- all_bipartite_matches(     x_mat = x_mat,     cov_x = cov_x,     weight_list = weight_vecs,     treat_vec = treat_vec,     match_method = \"with_replacement\",     n_sinks = c(0L, 30L, 100L, 200L) )  ## 2. get all brier scores for all results wr_briers <- lapply(all_wr_matches, function(by_sinks) {     unlist(lapply(by_sinks, function(indiv_match_list) {         brier_score_cv(             x_mat = x_mat,             match_list = indiv_match_list,         )     })) }) brier_wr_matches <- brier_bipartite_matches(     x_mat = x_mat,     cov_x = cov_x,     weight_list = weight_vecs,     treat_vec = treat_vec,     match_method = \"with_replacement\",     n_sinks = c(0L, 30L, 100L, 200L),     silent = TRUE ) > ## to verify (can use any of the matches): > all.equal(all_wr_matches[[\"100\"]][[2]],           brier_wr_matches[[\"matches_by_sinks\"]][[\"100\"]][[2]]) > [1] TRUE some_result <- any_function_that_uses_match_predict_function(     ...,     ...,     match_predict_function = match_predict_xgb(         nrounds = 100,         nthread = 4,         params = list(eta = 0.3, max.depth = 6)         ## anything else gets passed to xgboost::xgb.train    ),    ... ) perm_results <- permutation_matches(     matches_by_sinks = all_wr_matches,     briers_by_sinks = wr_briers,     x_mat = x_mat,     n_sinks = c(0L, 30L, 100L, 200L) ) library(purrr) > perm_results$permutation_brier_scores $`0`  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1  $`30`  [1] 1.00 1.00 1.00 1.00 1.00 1.00 1.00 0.96 1.00 1.00 1.00 1.00 0.93 1.00 1.00 [16] 1.00 0.99 1.00 1.00 1.00 1.00 0.96 1.00 0.99 1.00  $`100`  [1] 0.95 1.00 0.95 1.00 1.00 1.00 0.83 0.97 0.91 0.93 1.00 0.91 0.81 1.00 1.00 [16] 1.00 1.00 0.93 1.00 0.83 1.00 0.95 1.00 0.95 0.96  $`200`  [1] 0.76 0.84 0.62 0.52 0.64 0.84 0.94 0.54 0.46 0.92 0.85 0.80 1.00 0.67 0.92 [16] 0.82 0.76 0.88 0.21 0.68 0.93 0.64 0.68 0.82 0.81 > map_dbl(perm_results$best_matches, \"permutation_brier\")    0    30   100   200 1.00  0.93  0.81  0.21 $`0` 0 |                             █| 1  $`30` 0 |                           ▁▁█| 1  $`100` 0 |                        ▂  ▂▃█| 1  $`200` 0 |      ▂      ▂ ▂▂ ▂▅█ ▅▂██▂█▂▂| 1 treat_est  treat_se num_matches num_sinks treat_sd raw_brier perm_brier     0.50753   0.10678           270         0 1.7546   0.23732         1.00     0.44120   0.10370           240        30 1.6066   0.24966         0.93     0.34341   0.11819           170       100 1.5410   0.25219         0.81     0.14635   0.15058            70       200 1.2598   0.27098         0.21"},{"path":[]},{"path":"/reference/add_nbp_sinks.html","id":null,"dir":"Reference","previous_headings":"","what":"This function gives a distance matrix that nbpmatching likes — add_nbp_sinks","title":"This function gives a distance matrix that nbpmatching likes — add_nbp_sinks","text":"Note: dist_mat even (e.g. number rows/cols), supply even number sinks, odd odd - else get ghost value added warning. true even adding zero sinks odd.","code":""},{"path":"/reference/add_nbp_sinks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function gives a distance matrix that nbpmatching likes — add_nbp_sinks","text":"","code":"add_nbp_sinks(dist_mat, n_sinks = 0L)"},{"path":"/reference/add_nbp_sinks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function gives a distance matrix that nbpmatching likes — add_nbp_sinks","text":"dist_mat symmetric distance matrix, e.g. result weighted_mahal n_sinks many potential matches throw away?","code":""},{"path":"/reference/all_bipartite_matches.html","id":null,"dir":"Reference","previous_headings":"","what":"idea is to complete a search for a given N,\nor vector N — all_bipartite_matches","title":"idea is to complete a search for a given N,\nor vector N — all_bipartite_matches","text":"idea complete search given N, vector N","code":""},{"path":"/reference/all_bipartite_matches.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"idea is to complete a search for a given N,\nor vector N — all_bipartite_matches","text":"","code":"all_bipartite_matches(   x_mat,   cov_x,   weight_list,   treat_vec,   match_method = c(\"with_replacement\", \"optimal\", \"greedy\"),   n_sinks = 0L,   caliper_list = gen_caliper_list(),   propensity_list = match_propensity_list(NULL),   sqrt_mahal = TRUE,   tol_val = NULL )"},{"path":"/reference/all_bipartite_matches.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"idea is to complete a search for a given N,\nor vector N — all_bipartite_matches","text":"x_mat input/design matrix (already rank-adjusted etc) cov_x (potentially rank-adjusted) covariance x_mat. means possible cov(x_mat) equal cov_x; see covariance_with_ranks details. weight_list list weight vectors. See generate_random_weights automatically generate reasonable set vectors. treat_vec Logical (1/0) vector, indicating treatment (control). n_sinks many potential matches bother NOTE: can vector, optimal matching. caliper_list Optional, see gen_caliper_list. Provide force matches close metric. tol_val optimal matches, can set tolerance within optimality , can zero perfect optimality. Default 1e-4 reasonable many cases.","code":""},{"path":"/reference/all_nonbipartite_matches.html","id":null,"dir":"Reference","previous_headings":"","what":"Same as all_bipartite_matches but for nbp matching — all_nonbipartite_matches","title":"Same as all_bipartite_matches but for nbp matching — all_nonbipartite_matches","text":"all_bipartite_matches nbp matching","code":""},{"path":"/reference/all_nonbipartite_matches.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Same as all_bipartite_matches but for nbp matching — all_nonbipartite_matches","text":"","code":"all_nonbipartite_matches(   x_mat,   cov_x,   weight_list,   tolerance_list = gen_tolerance_list(),   match_method = c(\"with_replacement\", \"optimal\", \"greedy\"),   n_sinks = 0L,   caliper_list = gen_caliper_list(),   propensity_list = match_propensity_list(NULL),   sqrt_mahal = TRUE,   keep_all_with_replacement = FALSE )"},{"path":"/reference/all_nonbipartite_matches.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Same as all_bipartite_matches but for nbp matching — all_nonbipartite_matches","text":"x_mat input/design matrix (already rank-adjusted etc) cov_x (potentially rank-adjusted) covariance x_mat. means possible cov(x_mat) equal cov_x; see covariance_with_ranks details. weight_list list weight vectors. See generate_random_weights automatically generate reasonable set vectors. tolerance_list See gen_tolerance_list match_method enum corresponds three matching methods discussed : \"with_replacement\" Finds smallest control treatment \"greedy\" Greedily generates pairs. Note order choosing greedy pairs random, possible solution. \"optimal\" Minimum total distance n_sinks many potential matches bother NOTE: can vector, optimal matching. caliper_list Optional, see gen_caliper_list. Provide force matches close metric. keep_all_with_replacement logical, default FALSE. nbp matching replacement, can cases form nearly many pairs units (using tolerance vec, maybe lowest value pairs, since control unit). form contrast methods, cut using half default.","code":""},{"path":"/reference/approx_ratio_sd.html","id":null,"dir":"Reference","previous_headings":"","what":"Approximate the standard deviation of the ratio of two vectors — approx_ratio_sd","title":"Approximate the standard deviation of the ratio of two vectors — approx_ratio_sd","text":"delta method gives us: $$    Var(N/D) \\approx \\frac{\\mu_N^2}{\\mu_D^2}                     \\bigg[ \\frac{\\sigma^2_N}{\\mu_N^2} +                            \\frac{\\sigma^2_D}{\\mu_D^2} -                            2 \\frac{Cov(N, D)}{\\mu_N \\mu_D}] $$ course necessarily clear covariance vectors, indeed interesting cases.","code":""},{"path":"/reference/approx_ratio_sd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Approximate the standard deviation of the ratio of two vectors — approx_ratio_sd","text":"","code":"approx_ratio_sd(   numerator_mean,   numerator_sd,   denominator_mean,   denominator_sd,   covariance )"},{"path":"/reference/approx_ratio_sd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Approximate the standard deviation of the ratio of two vectors — approx_ratio_sd","text":"numerator_mean mean numerator numerator_sd standard dev numerator denominator_mean mean denominator denominator_sd standard dev denominator covariance covariance numerator denominator","code":""},{"path":"/reference/approx_ratio_sd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Approximate the standard deviation of the ratio of two vectors — approx_ratio_sd","text":"Returns single float: sd estimate","code":""},{"path":"/reference/approx_ratio_sd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Approximate the standard deviation of the ratio of two vectors — approx_ratio_sd","text":"e.g. Kendall’s Advanced Theory Statistics places delta method / Taylor expansion","code":""},{"path":"/reference/approx_ratio_sd.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Approximate the standard deviation of the ratio of two vectors — approx_ratio_sd","text":"Colman Humphrey","code":""},{"path":"/reference/binary_search.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic binary search algo: finding the input. — binary_search","title":"Generic binary search algo: finding the input. — binary_search","text":"Generic binary search algo: finding input.","code":""},{"path":"/reference/binary_search.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic binary search algo: finding the input. — binary_search","text":"","code":"binary_search(   target_value,   monotone_function,   init_bounds = NULL,   error_gap = 0.000001,   max_iters = 100L )"},{"path":"/reference/binary_search.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic binary search algo: finding the input. — binary_search","text":"target_value value function achieve. monotone_function function want find relevant input . init_bounds Default NULL; supply length-two vector wish supply initial bounds. Note function works certain range, monotonic certain range, likely need supply bounds. given, search directions zero. error_gap Binary search gap function input target value smaller number. max_iters many iterations try . can supply Inf really want.","code":""},{"path":"/reference/binary_search.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic binary search algo: finding the input. — binary_search","text":"input gives target_value output.","code":""},{"path":"/reference/binary_search.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generic binary search algo: finding the input. — binary_search","text":"Colman Humphrey","code":""},{"path":"/reference/bipartite_match_sd.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the standard deviation for a match, on the outcome — bipartite_match_sd","title":"Calculates the standard deviation for a match, on the outcome — bipartite_match_sd","text":"Calculates standard deviation match, outcome","code":""},{"path":"/reference/bipartite_match_sd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the standard deviation for a match, on the outcome — bipartite_match_sd","text":"","code":"bipartite_match_sd(   x_mat,   cov_x,   y_vector,   match_list,   treat_vec,   caliper_list = gen_caliper_list(),   propensity_list = match_propensity_list(NULL),   weight_vec = NULL,   use_all_controls = TRUE,   sqrt_mahal = TRUE )"},{"path":"/reference/bipartite_match_sd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the standard deviation for a match, on the outcome — bipartite_match_sd","text":"x_mat input/design matrix (already rank-adjusted etc) cov_x (potentially rank-adjusted) covariance x_mat. means possible cov(x_mat) equal cov_x; see covariance_with_ranks details. y_vector Outcome vector (used match generation). match_list particular match result. treat_vec Logical (1/0) vector, indicating treatment (control). caliper_list Optional, see gen_caliper_list. Provide force matches close metric. use_all_controls logical; using bipartite matches, estimate variance using controls possible? Default TRUE. FALSE, use controls match given","code":""},{"path":"/reference/bipartite_match_sd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the standard deviation for a match, on the outcome — bipartite_match_sd","text":"single float, standard deviation (standard error) match","code":""},{"path":"/reference/bipartite_match_sd.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculates the standard deviation for a match, on the outcome — bipartite_match_sd","text":"Colman Humphrey","code":""},{"path":"/reference/bipartite_matches.html","id":null,"dir":"Reference","previous_headings":"","what":"Generating bipartite matched pairs — bipartite_matches","title":"Generating bipartite matched pairs — bipartite_matches","text":"Generates matched pairs either: Replacement Finds smallest control treatment Without Replacement, Greedy Greedily generates pairs. Note order choosing greedy pairs random, possible solution. Without Replacement, Optimally Minimum total distance happy use control units potentially multiple times, first way fast optimal.","code":""},{"path":"/reference/bipartite_matches.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generating bipartite matched pairs — bipartite_matches","text":"","code":"bipartite_matches(   dist_mat,   treat_vec,   match_method = c(\"with_replacement\", \"optimal\", \"greedy\"),   n_sinks = NULL,   tol_val = NULL,   weight_vec = NULL )"},{"path":"/reference/bipartite_matches.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generating bipartite matched pairs — bipartite_matches","text":"dist_mat Matrix pairwise distances. treat_vec Vector representing subjects; 0 control, 1 treated. match_method enum corresponds three matching methods discussed : \"with_replacement\" Finds smallest control treatment \"greedy\" Greedily generates pairs. Note order choosing greedy pairs random, possible solution. \"optimal\" Minimum total distance n_sinks many sinks use; can vector. Note greedy simple -replacement matching, often better sort elsewhere. Optimal matching can take one value. Default NULL match ignore sinks. tol_val tolerance solving optimal matches - far acceptable true optimal value? Speed large value, accuracy small. relevant !with_replacement && !greedy. Default 1e-4 reasonable many cases. weight_vec Default NULL: optionally supply weight vector used generate dist_mat 'll returned match_list generated function","code":""},{"path":"/reference/bipartite_matches.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generating bipartite matched pairs — bipartite_matches","text":"basic return value list five elements optional sixth: treat_index index treated units, units treat_index_within index treated units, set treated control_index index control units, units control_index_within index control units, set control distance distances pairs weight_vec weight vector used generate dist_mat supplied get list objects, extra element: number sinks used. n_sinks NULL, 'll default single sink value: zero.","code":""},{"path":"/reference/bipartite_matches.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generating bipartite matched pairs — bipartite_matches","text":", trade speed vs optimality. Greedy runs units random order, want run greedy bunch times take best, still (likely) much faster running optimal matching.","code":""},{"path":"/reference/bipartite_matches.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generating bipartite matched pairs — bipartite_matches","text":"Colman Humphrey","code":""},{"path":"/reference/boot_func.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple bootstrap function that does a resampling bootstrap of a vector\nfor a given function. — boot_func","title":"Simple bootstrap function that does a resampling bootstrap of a vector\nfor a given function. — boot_func","text":"Simple bootstrap function resampling bootstrap vector given function.","code":""},{"path":"/reference/boot_func.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple bootstrap function that does a resampling bootstrap of a vector\nfor a given function. — boot_func","text":"","code":"boot_func(vec, func, resamples = 100L)"},{"path":"/reference/boot_func.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple bootstrap function that does a resampling bootstrap of a vector\nfor a given function. — boot_func","text":"vec Vector bootstrap resample . func Function call samples. resamples many resamples .","code":""},{"path":"/reference/boot_func.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple bootstrap function that does a resampling bootstrap of a vector\nfor a given function. — boot_func","text":"Returns vector length resamples, func applied bootstrap resample.","code":""},{"path":"/reference/boot_func.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simple bootstrap function that does a resampling bootstrap of a vector\nfor a given function. — boot_func","text":"Colman Humphrey","code":""},{"path":"/reference/brier_bipartite_matches.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes all matches, then gets the brier scores for each. Reorder by\nnumber of sinks. — brier_bipartite_matches","title":"Computes all matches, then gets the brier scores for each. Reorder by\nnumber of sinks. — brier_bipartite_matches","text":"Computes matches, gets brier scores . Reorder number sinks.","code":""},{"path":"/reference/brier_bipartite_matches.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes all matches, then gets the brier scores for each. Reorder by\nnumber of sinks. — brier_bipartite_matches","text":"","code":"brier_bipartite_matches(   x_mat,   cov_x,   weight_list,   treat_vec,   match_method = c(\"with_replacement\", \"optimal\", \"greedy\"),   n_sinks = 0L,   caliper_list = gen_caliper_list(),   propensity_list = match_propensity_list(NULL),   sqrt_mahal = TRUE,   tol_val = NULL,   design = \"cross_all\",   num_folds = 5,   match_predict_function = match_predict_xgb(),   silent = !interactive() )"},{"path":"/reference/brier_bipartite_matches.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes all matches, then gets the brier scores for each. Reorder by\nnumber of sinks. — brier_bipartite_matches","text":"x_mat input/design matrix (already rank-adjusted etc) cov_x (potentially rank-adjusted) covariance x_mat. means possible cov(x_mat) equal cov_x; see covariance_with_ranks details. weight_list list weight vectors. See generate_random_weights automatically generate reasonable set vectors. treat_vec Logical (1/0) vector, indicating treatment (control). n_sinks many potential matches bother NOTE: can vector, optimal matching. caliper_list Optional, see gen_caliper_list. Provide force matches close metric. tol_val optimal matches, can set tolerance within optimality , can zero perfect optimality. Default 1e-4 reasonable many cases. design see predict_prepare num_folds many CV folds use match_predict_function function predict treated units","code":""},{"path":"/reference/brier_bipartite_matches.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes all matches, then gets the brier scores for each. Reorder by\nnumber of sinks. — brier_bipartite_matches","text":"List matches within sink values, brier scores .","code":""},{"path":"/reference/brier_bipartite_matches.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Computes all matches, then gets the brier scores for each. Reorder by\nnumber of sinks. — brier_bipartite_matches","text":"Colman Humphrey","code":""},{"path":"/reference/brier_nonbipartite_matches.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes all matches, then gets the brier scores for each. Reorder by\nnumber of sinks. — brier_nonbipartite_matches","title":"Computes all matches, then gets the brier scores for each. Reorder by\nnumber of sinks. — brier_nonbipartite_matches","text":"Computes matches, gets brier scores . Reorder number sinks.","code":""},{"path":"/reference/brier_nonbipartite_matches.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes all matches, then gets the brier scores for each. Reorder by\nnumber of sinks. — brier_nonbipartite_matches","text":"","code":"brier_nonbipartite_matches(   x_mat,   cov_x,   weight_list,   tolerance_list = gen_tolerance_list(),   match_method = c(\"with_replacement\", \"optimal\", \"greedy\"),   n_sinks = 0L,   caliper_list = gen_caliper_list(),   propensity_list = match_propensity_list(NULL),   sqrt_mahal = TRUE,   keep_all_with_replacement = FALSE,   design = \"cross_all\",   num_folds = 5,   match_predict_function = match_predict_xgb(),   silent = !interactive() )"},{"path":"/reference/brier_nonbipartite_matches.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes all matches, then gets the brier scores for each. Reorder by\nnumber of sinks. — brier_nonbipartite_matches","text":"x_mat input/design matrix (already rank-adjusted etc) cov_x (potentially rank-adjusted) covariance x_mat. means possible cov(x_mat) equal cov_x; see covariance_with_ranks details. weight_list list weight vectors. See generate_random_weights automatically generate reasonable set vectors. tolerance_list See gen_tolerance_list match_method enum corresponds three matching methods discussed : \"with_replacement\" Finds smallest control treatment \"greedy\" Greedily generates pairs. Note order choosing greedy pairs random, possible solution. \"optimal\" Minimum total distance n_sinks many potential matches bother NOTE: can vector, optimal matching. caliper_list Optional, see gen_caliper_list. Provide force matches close metric. keep_all_with_replacement logical, default FALSE. nbp matching replacement, can cases form nearly many pairs units (using tolerance vec, maybe lowest value pairs, since control unit). form contrast methods, cut using half default. design see predict_prepare num_folds many CV folds use match_predict_function function predict treated units","code":""},{"path":"/reference/brier_nonbipartite_matches.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes all matches, then gets the brier scores for each. Reorder by\nnumber of sinks. — brier_nonbipartite_matches","text":"List matches within sink values, brier scores .","code":""},{"path":"/reference/brier_nonbipartite_matches.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Computes all matches, then gets the brier scores for each. Reorder by\nnumber of sinks. — brier_nonbipartite_matches","text":"Colman Humphrey","code":""},{"path":"/reference/brier_score.html","id":null,"dir":"Reference","previous_headings":"","what":"Takes in training/test data and a prediction\nfunction to use, generates brier score — brier_score","title":"Takes in training/test data and a prediction\nfunction to use, generates brier score — brier_score","text":"Takes training/test data prediction function use, generates brier score","code":""},{"path":"/reference/brier_score.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Takes in training/test data and a prediction\nfunction to use, generates brier score — brier_score","text":"","code":"brier_score(   train_test_list,   match_predict_function = match_predict_xgb(),   avg = TRUE )"},{"path":"/reference/brier_score.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Takes in training/test data and a prediction\nfunction to use, generates brier score — brier_score","text":"train_test_list output predict_prepare match_predict_function function predict treated unit, see e.g. match_predict_xgb (produces default calling) match_predict_linear avg logical, default TRUE: average (sum) briers?","code":""},{"path":"/reference/brier_score.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Takes in training/test data and a prediction\nfunction to use, generates brier score — brier_score","text":"result calc_brier, length-one double","code":""},{"path":"/reference/brier_score.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Takes in training/test data and a prediction\nfunction to use, generates brier score — brier_score","text":"Colman Humphrey","code":""},{"path":"/reference/brier_score_cv.html","id":null,"dir":"Reference","previous_headings":"","what":"For a match, calculates brier score using cross validation — brier_score_cv","title":"For a match, calculates brier score using cross validation — brier_score_cv","text":"match, calculates brier score using cross validation","code":""},{"path":"/reference/brier_score_cv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"For a match, calculates brier score using cross validation — brier_score_cv","text":"","code":"brier_score_cv(   x_mat,   match_list,   design = \"cross_all\",   num_folds = 5,   match_predict_function = match_predict_xgb() )"},{"path":"/reference/brier_score_cv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"For a match, calculates brier score using cross validation — brier_score_cv","text":"x_mat typical input matrix match_list match result design see predict_prepare num_folds many CV folds use match_predict_function function predict treated units","code":""},{"path":"/reference/brier_score_cv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"For a match, calculates brier score using cross validation — brier_score_cv","text":"brier score (averaged units)","code":""},{"path":"/reference/brier_score_cv.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"For a match, calculates brier score using cross validation — brier_score_cv","text":"Colman Humphrey","code":""},{"path":"/reference/brier_score_split.html","id":null,"dir":"Reference","previous_headings":"","what":"For a match, calculates brier score on a test split of the data — brier_score_split","title":"For a match, calculates brier score on a test split of the data — brier_score_split","text":"match, calculates brier score test split data","code":""},{"path":"/reference/brier_score_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"For a match, calculates brier score on a test split of the data — brier_score_split","text":"","code":"brier_score_split(   x_mat,   match_list,   design = \"cross_all\",   train_fraction = 0.7,   match_predict_function = match_predict_xgb() )"},{"path":"/reference/brier_score_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"For a match, calculates brier score on a test split of the data — brier_score_split","text":"x_mat typical input matrix match_list match result design see predict_prepare train_fraction split data use training match_predict_function function predict treated units","code":""},{"path":"/reference/brier_score_split.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"For a match, calculates brier score on a test split of the data — brier_score_split","text":"brier score","code":""},{"path":"/reference/brier_score_split.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"For a match, calculates brier score on a test split of the data — brier_score_split","text":"Colman Humphrey","code":""},{"path":"/reference/build_index_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Takes a vector, returns a named list of repeated elements\nalong with indices. — build_index_vector","title":"Takes a vector, returns a named list of repeated elements\nalong with indices. — build_index_vector","text":"vector potentially repeating elements. want elements repeats, along index locations value. e.g. vec = c(\"\", \"d\", \"f\", \"d\", \"f\"), get list element \"d\" vector values c(2, 4) \"f\" c(3, 5).","code":""},{"path":"/reference/build_index_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Takes a vector, returns a named list of repeated elements\nalong with indices. — build_index_vector","text":"","code":"build_index_vector(vec)"},{"path":"/reference/build_index_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Takes a vector, returns a named list of repeated elements\nalong with indices. — build_index_vector","text":"vec Vector potentially repeating elements want index locations ","code":""},{"path":"/reference/build_index_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Takes a vector, returns a named list of repeated elements\nalong with indices. — build_index_vector","text":"List named elements, names input vec, element list indices","code":""},{"path":"/reference/build_index_vector.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Takes a vector, returns a named list of repeated elements\nalong with indices. — build_index_vector","text":"Colman Humphrey","code":""},{"path":"/reference/calc_brier.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple brier score calc — calc_brier","title":"Simple brier score calc — calc_brier","text":"Simple brier score calc","code":""},{"path":"/reference/calc_brier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple brier score calc — calc_brier","text":"","code":"calc_brier(predict, outcome, avg = TRUE)"},{"path":"/reference/calc_brier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple brier score calc — calc_brier","text":"predict \\(P(Y = 1)\\) value outcome result (\\(\\{0, 1\\}\\)) avg logica, default TRUE, want mean?","code":""},{"path":"/reference/calc_brier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple brier score calc — calc_brier","text":"length one double: total brier sum, avg (default)","code":""},{"path":"/reference/calc_brier.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simple brier score calc — calc_brier","text":"Colman Humphrey","code":""},{"path":"/reference/compute_sim_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Takes in functions to generate simulation data, and computes\nsimulation results for our method and some competitors — compute_sim_result","title":"Takes in functions to generate simulation data, and computes\nsimulation results for our method and some competitors — compute_sim_result","text":"Takes functions generate simulation data, computes simulation results method competitors","code":""},{"path":"/reference/compute_sim_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Takes in functions to generate simulation data, and computes\nsimulation results for our method and some competitors — compute_sim_result","text":"","code":"compute_sim_result(   x_generator = default_x_generator,   treat_prob_generator,   mean_generator,   error_generator = default_error_generator,   n_sink_gen = n_sink_generator(),   match_method = \"with_replacement\",   n_rows = 500L,   n_cols = 5L,   num_weight_vectors = 100L,   silent = !interactive() )"},{"path":"/reference/compute_sim_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Takes in functions to generate simulation data, and computes\nsimulation results for our method and some competitors — compute_sim_result","text":"x_generator Function takes number rows columns produces data matrix dimension. treat_prob_generator Function takes matrix produces treatment probabilities. mean_generator Function takes matrix produces expected value row. error_generator Function accepts number rows generates error vector (e.g. generates normal noise). generate zero-mean data. n_sink_gen Default n_sink_generator, probably want use : argument function accepts treat_vec produces vector sink numbers. n_rows many rows generate. n_cols many columns use. num_weight_vectors many weight vectors generate. silent Default !interactive(), want suppress messages.","code":""},{"path":"/reference/compute_sim_result.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Takes in functions to generate simulation data, and computes\nsimulation results for our method and some competitors — compute_sim_result","text":"Returns named list: naive_est Just number: mean difference treated units control propensity_results List lists: n_sinks est mahal_results weighted_results List lists: n_sinks, raw brier score, permutation brier score, est","code":""},{"path":"/reference/compute_sim_result.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Takes in functions to generate simulation data, and computes\nsimulation results for our method and some competitors — compute_sim_result","text":"Colman Humphrey","code":""},{"path":"/reference/covariance_with_ranks.html","id":null,"dir":"Reference","previous_headings":"","what":"computes the covariance of the input matrix, adjusting for ranks if given — covariance_with_ranks","title":"computes the covariance of the input matrix, adjusting for ranks if given — covariance_with_ranks","text":"adjusts ranks given; fixes ties; rescales etc; returns covariance x_mat. rank_cols given, function identical just calling cov(x_mat)","code":""},{"path":"/reference/covariance_with_ranks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"computes the covariance of the input matrix, adjusting for ranks if given — covariance_with_ranks","text":"","code":"covariance_with_ranks(x_mat, rank_cols = NULL)"},{"path":"/reference/covariance_with_ranks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"computes the covariance of the input matrix, adjusting for ranks if given — covariance_with_ranks","text":"x_mat matrix variables (numeric) rank_cols names columns converted ranks analysis","code":""},{"path":"/reference/covariance_with_ranks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"computes the covariance of the input matrix, adjusting for ranks if given — covariance_with_ranks","text":"covariance matrix x_mat (potentially adjusted ranks)","code":""},{"path":"/reference/create_caliper.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates caliper penalties — create_caliper","title":"Creates caliper penalties — create_caliper","text":"Given vector, caliper_vec, function sets penalties pairwise differences caliper_max; either Inf penalty (default), continuous penalty. Typical usage add resulting matrix function onto distance matrix, say pairwise Mahalanobis.","code":""},{"path":"/reference/create_caliper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates caliper penalties — create_caliper","text":"","code":"create_caliper(caliper_list, treat_vec = NULL)"},{"path":"/reference/create_caliper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates caliper penalties — create_caliper","text":"caliper_list Result gen_caliper_list treat_vec Optional; want pairs treat control.","code":""},{"path":"/reference/create_caliper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates caliper penalties — create_caliper","text":"matrix, either square (|caliper_vec| x |caliper_vec|) else sum(treat_vec == 1) x sum(treat_vec == 0).","code":""},{"path":"/reference/create_caliper.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Creates caliper penalties — create_caliper","text":"Colman Humphrey","code":""},{"path":"/reference/default_error_generator.html","id":null,"dir":"Reference","previous_headings":"","what":"Default function to generate mean-zero noise. Very simple. — default_error_generator","title":"Default function to generate mean-zero noise. Very simple. — default_error_generator","text":"Exported just functions default generate_simulation_input.","code":""},{"path":"/reference/default_error_generator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default function to generate mean-zero noise. Very simple. — default_error_generator","text":"","code":"default_error_generator(n_rows)"},{"path":"/reference/default_error_generator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default function to generate mean-zero noise. Very simple. — default_error_generator","text":"n_rows many rows produce.","code":""},{"path":"/reference/default_error_generator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default function to generate mean-zero noise. Very simple. — default_error_generator","text":"Returns just mean 0 variance 1 normal noise.","code":""},{"path":"/reference/default_error_generator.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Default function to generate mean-zero noise. Very simple. — default_error_generator","text":"Colman Humphrey","code":""},{"path":"/reference/default_x_generator.html","id":null,"dir":"Reference","previous_headings":"","what":"A default function that generates an input data matrix. — default_x_generator","title":"A default function that generates an input data matrix. — default_x_generator","text":"First generates random covariance, generates normal data covariance (actually correlation).","code":""},{"path":"/reference/default_x_generator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A default function that generates an input data matrix. — default_x_generator","text":"","code":"default_x_generator(n_rows, n_cols)"},{"path":"/reference/default_x_generator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A default function that generates an input data matrix. — default_x_generator","text":"n_rows many rows produce. n_cols many columns produce.","code":""},{"path":"/reference/default_x_generator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A default function that generates an input data matrix. — default_x_generator","text":"matrix data","code":""},{"path":"/reference/default_x_generator.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"A default function that generates an input data matrix. — default_x_generator","text":"Colman Humphrey","code":""},{"path":"/reference/example_mean_generator.html","id":null,"dir":"Reference","previous_headings":"","what":"An example function that generates a mean vector\ngiven an input matrix. — example_mean_generator","title":"An example function that generates a mean vector\ngiven an input matrix. — example_mean_generator","text":"example function generates mean vector given input matrix.","code":""},{"path":"/reference/example_mean_generator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An example function that generates a mean vector\ngiven an input matrix. — example_mean_generator","text":"","code":"example_mean_generator(x_mat)"},{"path":"/reference/example_mean_generator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An example function that generates a mean vector\ngiven an input matrix. — example_mean_generator","text":"x_mat Numeric matrix.","code":""},{"path":"/reference/example_mean_generator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"An example function that generates a mean vector\ngiven an input matrix. — example_mean_generator","text":"vector means, length equal nrow(x_mat).","code":""},{"path":"/reference/example_mean_generator.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"An example function that generates a mean vector\ngiven an input matrix. — example_mean_generator","text":"Colman Humphrey","code":""},{"path":"/reference/example_treat_prob_generator.html","id":null,"dir":"Reference","previous_headings":"","what":"An example function that generates treatment probabilities\ngiven an input matrix. — example_treat_prob_generator","title":"An example function that generates treatment probabilities\ngiven an input matrix. — example_treat_prob_generator","text":"example function generates treatment probabilities given input matrix.","code":""},{"path":"/reference/example_treat_prob_generator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An example function that generates treatment probabilities\ngiven an input matrix. — example_treat_prob_generator","text":"","code":"example_treat_prob_generator(x_mat)"},{"path":"/reference/example_treat_prob_generator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An example function that generates treatment probabilities\ngiven an input matrix. — example_treat_prob_generator","text":"x_mat Numeric matrix.","code":""},{"path":"/reference/example_treat_prob_generator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"An example function that generates treatment probabilities\ngiven an input matrix. — example_treat_prob_generator","text":"vector probabilities, length equal nrow(x_mat).","code":""},{"path":"/reference/example_treat_prob_generator.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"An example function that generates treatment probabilities\ngiven an input matrix. — example_treat_prob_generator","text":"Colman Humphrey","code":""},{"path":"/reference/expit.html","id":null,"dir":"Reference","previous_headings":"","what":"exp / 1 + exp — expit","title":"exp / 1 + exp — expit","text":"exp / 1 + exp","code":""},{"path":"/reference/expit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"exp / 1 + exp — expit","text":"","code":"expit(x)"},{"path":"/reference/expit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"exp / 1 + exp — expit","text":"x numeric vector","code":""},{"path":"/reference/expit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"exp / 1 + exp — expit","text":"numeric vector, now (0, 1)","code":""},{"path":"/reference/expit.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"exp / 1 + exp — expit","text":"Colman Humphrey","code":""},{"path":"/reference/fix_nbp_match.html","id":null,"dir":"Reference","previous_headings":"","what":"Converting nbp output to common output for this package. — fix_nbp_match","title":"Converting nbp output to common output for this package. — fix_nbp_match","text":"Takes result NBP matching deletes sinks, guess infinite distances; finally also returns columns.","code":""},{"path":"/reference/fix_nbp_match.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converting nbp output to common output for this package. — fix_nbp_match","text":"","code":"fix_nbp_match(nbp_match, nrow_match, tolerance_vec = NULL)"},{"path":"/reference/fix_nbp_match.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converting nbp output to common output for this package. — fix_nbp_match","text":"nbp_match Result nbpMatching::nonbimatch. nrow_match many real rows ? feed sinks nbpmatching sort manually, one way remove . tolerance_vec given, sort matches high / low.","code":""},{"path":"/reference/fixed_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"example from ?sample, when length could be one — fixed_sample","title":"example from ?sample, when length could be one — fixed_sample","text":"example ?sample, length one","code":""},{"path":"/reference/fixed_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"example from ?sample, when length could be one — fixed_sample","text":"","code":"fixed_sample(x, ...)"},{"path":"/reference/fold_indexing.html","id":null,"dir":"Reference","previous_headings":"","what":"Produces a list of indices split into k-folds — fold_indexing","title":"Produces a list of indices split into k-folds — fold_indexing","text":"Produces list indices split k-folds","code":""},{"path":"/reference/fold_indexing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Produces a list of indices split into k-folds — fold_indexing","text":"","code":"fold_indexing(index_length, num_folds)"},{"path":"/reference/fold_indexing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Produces a list of indices split into k-folds — fold_indexing","text":"index_length length vector index num_folds many folds need","code":""},{"path":"/reference/fold_indexing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Produces a list of indices split into k-folds — fold_indexing","text":"list vectors indices","code":""},{"path":"/reference/fold_indexing.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Produces a list of indices split into k-folds — fold_indexing","text":"Colman Humphrey","code":""},{"path":"/reference/gen_bipartite_repeated_variance.html","id":null,"dir":"Reference","previous_headings":"","what":"Abadie, Alberto and Guido W Imbens (2006).\n“Large sample properties of matching estimators\nfor average treatment effects”.\nEconometrica 74.1, pp. 235–267. - see page 251.\nMore info at “Matching on the estimated propensity score”.\nEconometrica 84.2, pp. 781–807. — gen_bipartite_repeated_variance","title":"Abadie, Alberto and Guido W Imbens (2006).\n“Large sample properties of matching estimators\nfor average treatment effects”.\nEconometrica 74.1, pp. 235–267. - see page 251.\nMore info at “Matching on the estimated propensity score”.\nEconometrica 84.2, pp. 781–807. — gen_bipartite_repeated_variance","text":"Abadie, Alberto Guido W Imbens (2006). “Large sample properties matching estimators average treatment effects”. Econometrica 74.1, pp. 235–267. - see page 251. info “Matching estimated propensity score”. Econometrica 84.2, pp. 781–807.","code":""},{"path":"/reference/gen_bipartite_repeated_variance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Abadie, Alberto and Guido W Imbens (2006).\n“Large sample properties of matching estimators\nfor average treatment effects”.\nEconometrica 74.1, pp. 235–267. - see page 251.\nMore info at “Matching on the estimated propensity score”.\nEconometrica 84.2, pp. 781–807. — gen_bipartite_repeated_variance","text":"","code":"gen_bipartite_repeated_variance(   x_mat,   cov_x,   y_vector,   control_index,   treat_vec,   caliper_list = gen_caliper_list(),   weight_vec = NULL,   use_all_controls = TRUE,   sqrt_mahal = TRUE )"},{"path":"/reference/gen_bipartite_repeated_variance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Abadie, Alberto and Guido W Imbens (2006).\n“Large sample properties of matching estimators\nfor average treatment effects”.\nEconometrica 74.1, pp. 235–267. - see page 251.\nMore info at “Matching on the estimated propensity score”.\nEconometrica 84.2, pp. 781–807. — gen_bipartite_repeated_variance","text":"x_mat input/design matrix (already rank-adjusted etc) cov_x (potentially rank-adjusted) covariance x_mat. means possible cov(x_mat) equal cov_x; see covariance_with_ranks details. y_vector Outcome vector (used match generation). treat_vec Logical (1/0) vector, indicating treatment (control). caliper_list Optional, see gen_caliper_list. Provide force matches close metric. use_all_controls logical; using bipartite matches, estimate variance using controls possible? Default TRUE. FALSE, use controls match given","code":""},{"path":"/reference/gen_caliper_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple wrapper to unify caliper input — gen_caliper_list","title":"Simple wrapper to unify caliper input — gen_caliper_list","text":"Simple wrapper unify caliper input","code":""},{"path":"/reference/gen_caliper_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple wrapper to unify caliper input — gen_caliper_list","text":"","code":"gen_caliper_list(caliper_vec = NULL, caliper_max = NULL, continuous_mult = 100)"},{"path":"/reference/gen_caliper_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple wrapper to unify caliper input — gen_caliper_list","text":"caliper_vec Default NULL; numeric vector \"blocks\" matches (caliper_max) value caliper_max maximum allowed difference (exactly difference allowed). continuous_mult value multiply differences caliper max. Set Inf infinite penalties, .e. block matches max.","code":""},{"path":"/reference/gen_caliper_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple wrapper to unify caliper input — gen_caliper_list","text":"Either NULL, list names input, checking values.","code":""},{"path":"/reference/gen_caliper_list.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simple wrapper to unify caliper input — gen_caliper_list","text":"Colman Humphrey","code":""},{"path":"/reference/gen_propensity_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Takes in elements needed for propensity work, checks input and\nbuilds a named list. — gen_propensity_list","title":"Takes in elements needed for propensity work, checks input and\nbuilds a named list. — gen_propensity_list","text":"Takes elements needed propensity work, checks input builds named list.","code":""},{"path":"/reference/gen_propensity_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Takes in elements needed for propensity work, checks input and\nbuilds a named list. — gen_propensity_list","text":"","code":"gen_propensity_list(   propensity_function = propensity_score_xgb(),   oos_propensity = FALSE,   n_folds = NULL )"},{"path":"/reference/gen_propensity_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Takes in elements needed for propensity work, checks input and\nbuilds a named list. — gen_propensity_list","text":"propensity_function function accepts list four elements: x_train, x_test, y_train, y_test, forms predictions using x_test (guess y_test used yet) oos_propensity Logical, want predict sample propensity score? people , indeed FALSE default. n_folds Default NULL; many folds want using sample propensity.","code":""},{"path":"/reference/gen_propensity_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Takes in elements needed for propensity work, checks input and\nbuilds a named list. — gen_propensity_list","text":"Named list, names input params.","code":""},{"path":"/reference/gen_propensity_list.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Takes in elements needed for propensity work, checks input and\nbuilds a named list. — gen_propensity_list","text":"Colman Humphrey","code":""},{"path":"/reference/gen_tolerance_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper to unify tolerance input, along with minor checks — gen_tolerance_list","title":"Wrapper to unify tolerance input, along with minor checks — gen_tolerance_list","text":"Note always block equal equality tolerance vec, hence tolerance_min NULL equivalent zero. sophisticated behaviour, may want directly control caliper list weighted distance matrix functions generate matches.","code":""},{"path":"/reference/gen_tolerance_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper to unify tolerance input, along with minor checks — gen_tolerance_list","text":"","code":"gen_tolerance_list(   tolerance_vec = NULL,   tolerance_min = NULL,   tolerance_max = NULL )"},{"path":"/reference/gen_tolerance_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper to unify tolerance input, along with minor checks — gen_tolerance_list","text":"tolerance_vec Default NULL; numeric \"continuous treatment\" vector use form non-bipartite matches: units j can matched \\(\\mid \\texttt{tolerance_vec}[] - \\texttt{tolerance_vec}[j]\\mid >   \\texttt{tolerance_min}\\). tolerance_min See - blocks matches close tolerance_vec. Something like minimum relevant difference \"treatment\" effect. Default NULL gives zero, .e. blocks equality tolerance_vec. tolerance_max Optionally may want also ensure \"treatment\" values far apart. E.g. may think assumptions reasonable valid small differences tolerance vector, large. another way: asking say marginal effects: bad one extra beer day?","code":""},{"path":"/reference/gen_tolerance_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper to unify tolerance input, along with minor checks — gen_tolerance_list","text":"Either NULL, list names input, validated values.","code":""},{"path":"/reference/gen_tolerance_list.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Wrapper to unify tolerance input, along with minor checks — gen_tolerance_list","text":"Colman Humphrey","code":""},{"path":"/reference/generate_k_fold_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructs a k-fold list of index_list objects for a given\nmatch_list — generate_k_fold_index","title":"Constructs a k-fold list of index_list objects for a given\nmatch_list — generate_k_fold_index","text":"Constructs k-fold list index_list objects given match_list","code":""},{"path":"/reference/generate_k_fold_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructs a k-fold list of index_list objects for a given\nmatch_list — generate_k_fold_index","text":"","code":"generate_k_fold_index(match_list, num_folds = 5L)"},{"path":"/reference/generate_k_fold_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructs a k-fold list of index_list objects for a given\nmatch_list — generate_k_fold_index","text":"match_list typical match_list entry num_folds many folds want, default 5","code":""},{"path":"/reference/generate_k_fold_index.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Constructs a k-fold list of index_list objects for a given\nmatch_list — generate_k_fold_index","text":"Colman Humphrey","code":""},{"path":"/reference/generate_p_cut_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Processes the data into the format required for plotting. — generate_p_cut_frame","title":"Processes the data into the format required for plotting. — generate_p_cut_frame","text":"Processes data format required plotting.","code":""},{"path":"/reference/generate_p_cut_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Processes the data into the format required for plotting. — generate_p_cut_frame","text":"","code":"generate_p_cut_frame(   full_raw_results,   p_cut_vals = seq(from = 0.2, to = 1, by = 0.05),   silent = !interactive() )"},{"path":"/reference/generate_p_cut_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Processes the data into the format required for plotting. — generate_p_cut_frame","text":"full_raw_results Dataframe results (spec come) p_cut_vals Vector cut values plot. rmse_func Function use RMSE calculation, defaults rmse_from_one_func, gives RMSE relative one.","code":""},{"path":"/reference/generate_p_cut_frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Processes the data into the format required for plotting. — generate_p_cut_frame","text":"List per n_rows value dataframe ready plotted.","code":""},{"path":"/reference/generate_p_cut_frame.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Processes the data into the format required for plotting. — generate_p_cut_frame","text":"Colman Humphrey","code":""},{"path":"/reference/generate_plot_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Takes the result of generate_p_cut_frame and creates plot\nlists based on our choise of RMSE function. — generate_plot_list","title":"Takes the result of generate_p_cut_frame and creates plot\nlists based on our choise of RMSE function. — generate_plot_list","text":"Takes result generate_p_cut_frame creates plot lists based choise RMSE function.","code":""},{"path":"/reference/generate_plot_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Takes the result of generate_p_cut_frame and creates plot\nlists based on our choise of RMSE function. — generate_plot_list","text":"","code":"generate_plot_list(   full_plot_frame,   rmse_func = rmse_from_one_func,   silent = !interactive() )"},{"path":"/reference/generate_plot_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Takes the result of generate_p_cut_frame and creates plot\nlists based on our choise of RMSE function. — generate_plot_list","text":"full_plot_frame Result generate_p_cut_frame. rmse_func Function takes vector estimates computes RMSE. silent want log anything.","code":""},{"path":"/reference/generate_plot_list.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Takes the result of generate_p_cut_frame and creates plot\nlists based on our choise of RMSE function. — generate_plot_list","text":"Colman Humphrey","code":""},{"path":"/reference/generate_random_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Generating random weights to use in matching procedures,\neach summing to one. — generate_random_weights","title":"Generating random weights to use in matching procedures,\neach summing to one. — generate_random_weights","text":"function generates vector weights column input data. must set prior weights (can ), must set number vectors. options: set minimum weights make sure little given column, set hierarchical info categories want lump together (see )","code":""},{"path":"/reference/generate_random_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generating random weights to use in matching procedures,\neach summing to one. — generate_random_weights","text":"","code":"generate_random_weights(   prior_weights,   number_vectors,   minimum_weights = NULL,   hierarchical_list = NULL )"},{"path":"/reference/generate_random_weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generating random weights to use in matching procedures,\neach summing to one. — generate_random_weights","text":"prior_weights Must equal length columns - .e. length weight vectors function produce. use generate uniform random variables 0 number. Can value repeated desired. number_vectors many weight vectors want. minimum_weights want set minimums, either globally per column. Note give minimum, add random weights top . hierarchical_list List per group / category variable: \"index\" Vector indices group corresponds \"weight\" Weight group \"variance\" (Optional) much variance want group use , still combine prior_weights minimum_weights","code":""},{"path":"/reference/generate_random_weights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generating random weights to use in matching procedures,\neach summing to one. — generate_random_weights","text":"list weight vectors","code":""},{"path":"/reference/generate_random_weights.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generating random weights to use in matching procedures,\neach summing to one. — generate_random_weights","text":"Colman Humphrey","code":""},{"path":"/reference/generate_simulation_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates input needed for a simulation run — generate_simulation_input","title":"Generates input needed for a simulation run — generate_simulation_input","text":"Generates input needed simulation run","code":""},{"path":"/reference/generate_simulation_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates input needed for a simulation run — generate_simulation_input","text":"","code":"generate_simulation_input(   n_rows = 500L,   n_cols = 5L,   x_generator = default_x_generator,   treat_prob_generator = example_treat_prob_generator,   mean_generator = example_mean_generator,   error_generator = default_error_generator )"},{"path":"/reference/generate_simulation_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates input needed for a simulation run — generate_simulation_input","text":"n_rows many rows generate. n_cols many columns use. x_generator Function takes number rows columns produces data matrix dimension. treat_prob_generator Function takes matrix produces treatment probabilities. mean_generator Function takes matrix produces expected value row. error_generator Function accepts number rows generates error vector (e.g. generates normal noise). generate zero-mean data.","code":""},{"path":"/reference/generate_simulation_input.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates input needed for a simulation run — generate_simulation_input","text":"List: x_mat Data Matrix treat_vec Treatment Vector y_vec Output Vector","code":""},{"path":"/reference/generate_simulation_input.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generates input needed for a simulation run — generate_simulation_input","text":"Colman Humphrey","code":""},{"path":"/reference/generate_train_test_split.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates an index_list from a match_list, splitting\naccording to train_fraction — generate_train_test_split","title":"Creates an index_list from a match_list, splitting\naccording to train_fraction — generate_train_test_split","text":"Creates index_list match_list, splitting according train_fraction","code":""},{"path":"/reference/generate_train_test_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates an index_list from a match_list, splitting\naccording to train_fraction — generate_train_test_split","text":"","code":"generate_train_test_split(match_list, train_fraction = 0.7)"},{"path":"/reference/generate_train_test_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates an index_list from a match_list, splitting\naccording to train_fraction — generate_train_test_split","text":"match_list typical match_list entry train_fraction fraction (0 1) use training data (rest test)","code":""},{"path":"/reference/generate_train_test_split.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Creates an index_list from a match_list, splitting\naccording to train_fraction — generate_train_test_split","text":"Colman Humphrey","code":""},{"path":"/reference/gls_action.html","id":null,"dir":"Reference","previous_headings":"","what":"Does the actual work of gls_known_relative_variance — gls_action","title":"Does the actual work of gls_known_relative_variance — gls_action","text":"actual work gls_known_relative_variance","code":""},{"path":"/reference/gls_action.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Does the actual work of gls_known_relative_variance — gls_action","text":"","code":"gls_action(y_vector, x_mat, rel_var_mat)"},{"path":"/reference/gls_known_relative_variance.html","id":null,"dir":"Reference","previous_headings":"","what":"Solving GLS when variance is known up to a scale factor — gls_known_relative_variance","title":"Solving GLS when variance is known up to a scale factor — gls_known_relative_variance","text":"know \\(y \\sim \\mathcal{N}(X \\beta, \\sigma^2 \\Sigma)\\) \\(\\Sigma\\) known \\(\\beta\\) \\(\\sigma^2\\) , can solve using nearly straight-forward generalised least squares. return list results: coefficients (\\(\\beta\\)); standard error coefficients; whole covariance matrix \\(\\beta\\) finally estimate \\(\\sigma^2\\).","code":""},{"path":"/reference/gls_known_relative_variance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Solving GLS when variance is known up to a scale factor — gls_known_relative_variance","text":"","code":"gls_known_relative_variance(y_vector, x_mat, rel_var_mat)"},{"path":"/reference/gls_known_relative_variance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Solving GLS when variance is known up to a scale factor — gls_known_relative_variance","text":"y_vector Outcome vector (future can potentially matrix) x_mat Matrix explanatory variables. include intercept add column 1s want . can also supply just single vector upgrade matrix (add intercept). Needs match length y_vector rel_var_mat \\(\\Sigma\\) equations : variance error (unknown) constant factor.","code":""},{"path":"/reference/gls_known_relative_variance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Solving GLS when variance is known up to a scale factor — gls_known_relative_variance","text":"List following elements: beta_gls: coefficients, \\(\\hat{\\beta}\\) beta_gls_stderr: standard errors coefficients var_beta_gls: covariance matrix \\(\\beta\\) sigma_sq_est: estimate \\(\\sigma^2\\). x_mat column names, hopefully pass resulting vectors/matrices.","code":""},{"path":"/reference/gls_known_relative_variance.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Solving GLS when variance is known up to a scale factor — gls_known_relative_variance","text":"Colman Humphrey","code":""},{"path":"/reference/gls_svd_lm.html","id":null,"dir":"Reference","previous_headings":"","what":"Not using this yet, but provides a useful alternative\nto gls_action: using R's in-built lm\nbut is slower — gls_svd_lm","title":"Not using this yet, but provides a useful alternative\nto gls_action: using R's in-built lm\nbut is slower — gls_svd_lm","text":"using yet, provides useful alternative gls_action: using R's -built lm slower","code":""},{"path":"/reference/gls_svd_lm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Not using this yet, but provides a useful alternative\nto gls_action: using R's in-built lm\nbut is slower — gls_svd_lm","text":"","code":"gls_svd_lm(y_vector, x_mat, rel_var_mat)"},{"path":"/reference/hierarchical_random_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates weights in a hierarchical setting — hierarchical_random_weights","title":"Generates weights in a hierarchical setting — hierarchical_random_weights","text":"Generates weights hierarchical setting","code":""},{"path":"/reference/hierarchical_random_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates weights in a hierarchical setting — hierarchical_random_weights","text":"","code":"hierarchical_random_weights(   prior_weights,   number_vectors,   minimum_weights,   hierarchical_list )"},{"path":"/reference/hierarchical_random_weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates weights in a hierarchical setting — hierarchical_random_weights","text":"prior_weights Must equal length columns - .e. length weight vectors function produce. use generate uniform random variables 0 number. Can value repeated desired. number_vectors many weight vectors want. minimum_weights want set minimums, either globally per column. Note give minimum, add random weights top . hierarchical_list List per group / category variable: \"index\" Vector indices group corresponds \"weight\" Weight group \"variance\" (Optional) much variance want group use , still combine prior_weights minimum_weights","code":""},{"path":"/reference/index_list_from_match.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructs an index_list from a match_list and a logical\nindex for training data — index_list_from_match","title":"Constructs an index_list from a match_list and a logical\nindex for training data — index_list_from_match","text":"Constructs index_list match_list logical index training data","code":""},{"path":"/reference/index_list_from_match.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructs an index_list from a match_list and a logical\nindex for training data — index_list_from_match","text":"","code":"index_list_from_match(match_list, train_index)"},{"path":"/reference/index_list_from_match.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructs an index_list from a match_list and a logical\nindex for training data — index_list_from_match","text":"match_list see bipartite_matches etc train_index logical index, length match_list[[\"treat_index\"]] (match_list[[\"control_index\"]])","code":""},{"path":"/reference/index_list_from_match.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructs an index_list from a match_list and a logical\nindex for training data — index_list_from_match","text":"returns index_list object, see predict_prepare","code":""},{"path":"/reference/index_list_from_match.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Constructs an index_list from a match_list and a logical\nindex for training data — index_list_from_match","text":"Colman Humphrey","code":""},{"path":"/reference/is_tf.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if x is a length-one logical — is_tf","title":"Test if x is a length-one logical — is_tf","text":"Test x length-one logical","code":""},{"path":"/reference/is_tf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if x is a length-one logical — is_tf","text":"","code":"is_tf(x)"},{"path":"/reference/is_tf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if x is a length-one logical — is_tf","text":"x ideally logical!","code":""},{"path":"/reference/is_tf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if x is a length-one logical — is_tf","text":"TRUE x length one logical, else FALSE","code":""},{"path":"/reference/is_tf.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Test if x is a length-one logical — is_tf","text":"Colman Humphrey","code":""},{"path":"/reference/mahal_imbalance.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes the Mahalanobis Imbalance of a match, or set of matches — mahal_imbalance","title":"Computes the Mahalanobis Imbalance of a match, or set of matches — mahal_imbalance","text":"function computes average distance treated control (average absolute anything), taking ranks account given, scales covariances, given weights","code":""},{"path":"/reference/mahal_imbalance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes the Mahalanobis Imbalance of a match, or set of matches — mahal_imbalance","text":"","code":"mahal_imbalance(   x_mat,   cov_x,   weight_vec = NULL,   sqrt_mahal = TRUE,   match_list = NULL,   match_list_list = NULL )"},{"path":"/reference/mahal_imbalance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes the Mahalanobis Imbalance of a match, or set of matches — mahal_imbalance","text":"x_mat numeric matrix (adjust non-numeric columns prior), already rank-adjusted desired cov_x covariance x, calculated potentially ranks weight_vec vector weights corresponding columns x_mat, giving weights relative \"raw\" (ranked) Mahalanobis. Note resulting matrix depend scale weight vector, matching : scaling Mahalanobis matrix effect distance minimising pairs etc sqrt_mahal logical, default TRUE; want regular Mahalanobis: \\(d(x_i, x_j) = (x_i - x_j)' \\Sigma^{-1} (x_i - x_j)\\) square root? (weighted, \\(\\Sigma^{-1}\\) becomes \\(W \\Sigma^{-1} W\\) ) match_list Result matching methods; provide exactly one param match_list_list match_list_list list match_list results; provide exactly one param match_list","code":""},{"path":"/reference/mahal_imbalance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes the Mahalanobis Imbalance of a match, or set of matches — mahal_imbalance","text":"vector mahalanobis distances","code":""},{"path":"/reference/mahal_imbalance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Computes the Mahalanobis Imbalance of a match, or set of matches — mahal_imbalance","text":"can provide single match, list matches","code":""},{"path":"/reference/mahal_imbalance_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Computed the mahal imbalance for a given match — mahal_imbalance_list","title":"Computed the mahal imbalance for a given match — mahal_imbalance_list","text":"Computed mahal imbalance given match","code":""},{"path":"/reference/mahal_imbalance_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computed the mahal imbalance for a given match — mahal_imbalance_list","text":"","code":"mahal_imbalance_list(x_mat, match_list, chol_mat, weight_vec, sqrt_mahal)"},{"path":"/reference/mahal_imbalance_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computed the mahal imbalance for a given match — mahal_imbalance_list","text":"x_mat numeric matrix (adjust non-numeric columns prior), already rank-adjusted desired match_list Result matching methods; provide exactly one param match_list_list chol_mat  weight_vec vector weights corresponding columns x_mat, giving weights relative \"raw\" (ranked) Mahalanobis. Note resulting matrix depend scale weight vector, matching : scaling Mahalanobis matrix effect distance minimising pairs etc sqrt_mahal logical, default TRUE; want regular Mahalanobis: \\(d(x_i, x_j) = (x_i - x_j)' \\Sigma^{-1} (x_i - x_j)\\) square root? (weighted, \\(\\Sigma^{-1}\\) becomes \\(W \\Sigma^{-1} W\\) )","code":""},{"path":"/reference/match_estimate.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated Computes a simple mean difference in an outcome vector\nbetween treatment and control in a paired match — match_estimate","title":"Deprecated Computes a simple mean difference in an outcome vector\nbetween treatment and control in a paired match — match_estimate","text":"Deprecated: even comupting mean now use regression_eval, pull \"estimate\" value resulting list. situations re-use treatments controls , general. Computes average difference treated units control units match, given match list.  Optionally confirms treated units indeed treated.  Note typically suitable non-bipartite matching.","code":""},{"path":"/reference/match_estimate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated Computes a simple mean difference in an outcome vector\nbetween treatment and control in a paired match — match_estimate","text":"","code":"match_estimate(match_list, y_vector, treat_vec = NULL)"},{"path":"/reference/match_estimate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deprecated Computes a simple mean difference in an outcome vector\nbetween treatment and control in a paired match — match_estimate","text":"match_list Typical match_list object bipartite_matches. y_vector outcome vector. treat_vec Default NULL, provide want checked.","code":""},{"path":"/reference/match_estimate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deprecated Computes a simple mean difference in an outcome vector\nbetween treatment and control in a paired match — match_estimate","text":"Returns single number, mean difference.","code":""},{"path":"/reference/match_estimate.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Deprecated Computes a simple mean difference in an outcome vector\nbetween treatment and control in a paired match — match_estimate","text":"Colman Humphrey","code":""},{"path":"/reference/match_predict_linear.html","id":null,"dir":"Reference","previous_headings":"","what":"Function factory to predict treatment / control pairs using\nglm (binomial) or lm — match_predict_linear","title":"Function factory to predict treatment / control pairs using\nglm (binomial) or lm — match_predict_linear","text":"returned function takes training test data (output predict_prepare), trains \"linear\" model training, predicts test, returns test vector. NOTE: glm model fail data \"tricky\", sure check. Also pure lm model fast - either cases need, set use_linear_lm TRUE. case bound probabilities returned 0 1.","code":""},{"path":"/reference/match_predict_linear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function factory to predict treatment / control pairs using\nglm (binomial) or lm — match_predict_linear","text":"","code":"match_predict_linear(use_linear_lm = FALSE)"},{"path":"/reference/match_predict_linear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function factory to predict treatment / control pairs using\nglm (binomial) or lm — match_predict_linear","text":"use_linear_lm logical, default FALSE; want use regular lm instead glm.","code":""},{"path":"/reference/match_predict_linear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function factory to predict treatment / control pairs using\nglm (binomial) or lm — match_predict_linear","text":"returns function takes train_test_list predict_prepare; function returns vector predictions test data","code":""},{"path":"/reference/match_predict_linear.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Function factory to predict treatment / control pairs using\nglm (binomial) or lm — match_predict_linear","text":"Colman Humphrey","code":""},{"path":"/reference/match_predict_xgb.html","id":null,"dir":"Reference","previous_headings":"","what":"Function factory to predict treatment / control pairs using\nxgboost — match_predict_xgb","title":"Function factory to predict treatment / control pairs using\nxgboost — match_predict_xgb","text":"returned function takes training test data (output predict_prepare), trains xgboost model training, predicts test, returns test vector","code":""},{"path":"/reference/match_predict_xgb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function factory to predict treatment / control pairs using\nxgboost — match_predict_xgb","text":"","code":"match_predict_xgb(   nrounds = 50,   nthread = 1,   params = list(eta = 0.1, max.depth = 4),   ... )"},{"path":"/reference/match_predict_xgb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function factory to predict treatment / control pairs using\nxgboost — match_predict_xgb","text":"nrounds training rounds xgb algorithm nthread threads use fitting, default 1... params list params pass xgboost, likely something like eta max.depth","code":""},{"path":"/reference/match_predict_xgb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function factory to predict treatment / control pairs using\nxgboost — match_predict_xgb","text":"returns function takes train_test_list predict_prepare; function returns vector predictions test data","code":""},{"path":"/reference/match_predict_xgb.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Function factory to predict treatment / control pairs using\nxgboost — match_predict_xgb","text":"Colman Humphrey","code":""},{"path":"/reference/match_propensity_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates the propensity parameters used for using propensity-based calipers — match_propensity_list","title":"Generates the propensity parameters used for using propensity-based calipers — match_propensity_list","text":"use input all_propensity_caliper_matches (likely nonbipartite version soon).","code":""},{"path":"/reference/match_propensity_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates the propensity parameters used for using propensity-based calipers — match_propensity_list","text":"","code":"match_propensity_list(   propensity_function = propensity_score_xgb(),   oos_propensity = FALSE,   n_folds = NULL,   caliper_sd_mult = 0.6,   continuous_mult = 100 )"},{"path":"/reference/match_propensity_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates the propensity parameters used for using propensity-based calipers — match_propensity_list","text":"propensity_function function accepts list four elements: x_train, x_test, y_train, y_test, forms predictions using x_test (guess y_test used yet) oos_propensity Logical, want predict sample propensity score? people , indeed FALSE default. n_folds Default NULL; many folds want using sample propensity. caliper_sd_mult set maximum gap units sd(propensity_score) * k, parameter value k. Default 0.6. continuous_mult See e.g. gen_caliper_list: instead blocking matches \"far apart\" caliper, add penalty going .","code":""},{"path":"/reference/match_propensity_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates the propensity parameters used for using propensity-based calipers — match_propensity_list","text":"list names equal input params","code":""},{"path":"/reference/matrix_to_simple_match.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple function for tol_random_sample to convert matrices\nof pairs into list — matrix_to_simple_match","title":"Simple function for tol_random_sample to convert matrices\nof pairs into list — matrix_to_simple_match","text":"Simple function tol_random_sample convert matrices pairs list","code":""},{"path":"/reference/matrix_to_simple_match.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple function for tol_random_sample to convert matrices\nof pairs into list — matrix_to_simple_match","text":"","code":"matrix_to_simple_match(pairs_matrix, treat_first = TRUE)"},{"path":"/reference/matrix_to_simple_match.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple function for tol_random_sample to convert matrices\nof pairs into list — matrix_to_simple_match","text":"pairs_matrix Matrix two columns, one treatment indices, one control treat_first Boolean; first column treatment column?","code":""},{"path":"/reference/matrix_to_simple_match.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple function for tol_random_sample to convert matrices\nof pairs into list — matrix_to_simple_match","text":"See tol_random_sample","code":""},{"path":"/reference/matrix_to_simple_match.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simple function for tol_random_sample to convert matrices\nof pairs into list — matrix_to_simple_match","text":"Colman Humphrey","code":""},{"path":"/reference/min_blocked_rank.html","id":null,"dir":"Reference","previous_headings":"","what":"Minimum ranked element, not equal to the blocked index — min_blocked_rank","title":"Minimum ranked element, not equal to the blocked index — min_blocked_rank","text":"Minimum ranked element, equal blocked index","code":""},{"path":"/reference/min_blocked_rank.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Minimum ranked element, not equal to the blocked index — min_blocked_rank","text":"","code":"min_blocked_rank(dist_mat, blocked_ind = NULL)"},{"path":"/reference/min_blocked_rank.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Minimum ranked element, not equal to the blocked index — min_blocked_rank","text":"dist_mat distance matrix. blocked_ind row, blocked element.","code":""},{"path":"/reference/min_blocked_rank.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Minimum ranked element, not equal to the blocked index — min_blocked_rank","text":"Vector indices","code":""},{"path":"/reference/min_blocked_rank.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Minimum ranked element, not equal to the blocked index — min_blocked_rank","text":"Colman Humphrey","code":""},{"path":"/reference/min_different_rank.html","id":null,"dir":"Reference","previous_headings":"","what":"Minimum ranked element, not equal to the row index — min_different_rank","title":"Minimum ranked element, not equal to the row index — min_different_rank","text":"Minimum ranked element, equal row index","code":""},{"path":"/reference/min_different_rank.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Minimum ranked element, not equal to the row index — min_different_rank","text":"","code":"min_different_rank(dist_mat)"},{"path":"/reference/min_different_rank.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Minimum ranked element, not equal to the row index — min_different_rank","text":"dist_mat (Probably symmetric) matrix.","code":""},{"path":"/reference/min_different_rank.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Minimum ranked element, not equal to the row index — min_different_rank","text":"vector indices","code":""},{"path":"/reference/min_different_rank.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Minimum ranked element, not equal to the row index — min_different_rank","text":"Colman Humphrey","code":""},{"path":"/reference/n_sink_generator.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates a function that generates a vector of sink lengths — n_sink_generator","title":"Generates a function that generates a vector of sink lengths — n_sink_generator","text":"function returns function accepts treatment vector generates vector numbers used sink counts.","code":""},{"path":"/reference/n_sink_generator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates a function that generates a vector of sink lengths — n_sink_generator","text":"","code":"n_sink_generator(start_frac = 0, end_frac = 0.8, length_out = 9)"},{"path":"/reference/n_sink_generator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates a function that generates a vector of sink lengths — n_sink_generator","text":"start_frac Smaller fraction units use sink number, default 0. end_frac Larger fraction units use sink number, default 0.8. length_out many sink values want, default 9.","code":""},{"path":"/reference/n_sink_generator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates a function that generates a vector of sink lengths — n_sink_generator","text":"Function accepts treat_vec returns vector numbers.","code":""},{"path":"/reference/n_sink_generator.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generates a function that generates a vector of sink lengths — n_sink_generator","text":"Colman Humphrey","code":""},{"path":"/reference/near_given_match.html","id":null,"dir":"Reference","previous_headings":"","what":"Find nearest index to vector given set of indices — near_given_match","title":"Find nearest index to vector given set of indices — near_given_match","text":"Find nearest index vector given set indices","code":""},{"path":"/reference/near_given_match.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find nearest index to vector given set of indices — near_given_match","text":"","code":"near_given_match(find_vec, given_index)"},{"path":"/reference/near_given_match.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find nearest index to vector given set of indices — near_given_match","text":"find_vec vector find close matches given_index index need find friends","code":""},{"path":"/reference/near_given_match.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find nearest index to vector given set of indices — near_given_match","text":"set indices values closest given index","code":""},{"path":"/reference/near_given_match.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Find nearest index to vector given set of indices — near_given_match","text":"Colman Humphrey","code":""},{"path":"/reference/nonbipartite_match_sd_scaled.html","id":null,"dir":"Reference","previous_headings":"","what":"Simlar to bipartite_match_sd, except for use with\nnon-bipartite matches. — nonbipartite_match_sd_scaled","title":"Simlar to bipartite_match_sd, except for use with\nnon-bipartite matches. — nonbipartite_match_sd_scaled","text":"result just based differences y-vector, differences weighed inversely proportional difference tolerance values. get standard error level, divide result sqrt(length(match_list[[\"treat_index\"]])) conservative general repeats.","code":""},{"path":"/reference/nonbipartite_match_sd_scaled.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simlar to bipartite_match_sd, except for use with\nnon-bipartite matches. — nonbipartite_match_sd_scaled","text":"","code":"nonbipartite_match_sd_scaled(   x_mat,   cov_x,   y_vector,   match_list,   tolerance_list = gen_tolerance_list(),   caliper_list = gen_caliper_list(),   weight_vec = NULL,   use_regression = TRUE,   sqrt_mahal = TRUE )"},{"path":"/reference/nonbipartite_match_sd_scaled.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simlar to bipartite_match_sd, except for use with\nnon-bipartite matches. — nonbipartite_match_sd_scaled","text":"x_mat input/design matrix (already rank-adjusted etc) cov_x (potentially rank-adjusted) covariance x_mat. means possible cov(x_mat) equal cov_x; see covariance_with_ranks details. y_vector Outcome vector (used match generation). match_list particular match result. tolerance_list See gen_tolerance_list caliper_list Optional, see gen_caliper_list. Provide force matches close metric. weight_vec Default NULL: optionally supply weight vector used generate dist_mat 'll returned match_list generated function","code":""},{"path":"/reference/nonbipartite_match_sd_scaled.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simlar to bipartite_match_sd, except for use with\nnon-bipartite matches. — nonbipartite_match_sd_scaled","text":"single float, standard deviation (standard error) match","code":""},{"path":"/reference/nonbipartite_match_sd_scaled.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simlar to bipartite_match_sd, except for use with\nnon-bipartite matches. — nonbipartite_match_sd_scaled","text":"Colman Humphrey","code":""},{"path":"/reference/nonbipartite_matches.html","id":null,"dir":"Reference","previous_headings":"","what":"Generating nonbipartite matched pairs — nonbipartite_matches","title":"Generating nonbipartite matched pairs — nonbipartite_matches","text":"Generates matched pairs either: Replacement Finds smallest control treatment Without Replacement, Greedy Greedily generates pairs. Note order choosing greedy pairs random, possible solution. Without Replacement, Optimally Minimum total distance happy allow units control multiple times, first way fast optimal. , trade speed vs optimality. Greedy runs units random order, want run greedy bunch times take best, still (likely) much faster running optimal matching.","code":""},{"path":"/reference/nonbipartite_matches.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generating nonbipartite matched pairs — nonbipartite_matches","text":"","code":"nonbipartite_matches(   dist_mat,   tolerance_list = gen_tolerance_list(),   match_method = c(\"with_replacement\", \"optimal\", \"greedy\"),   n_sinks = NULL,   keep_all_with_replacement = FALSE,   weight_vec = NULL )"},{"path":"/reference/nonbipartite_matches.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generating nonbipartite matched pairs — nonbipartite_matches","text":"dist_mat Matrix pairwise distances. tolerance_list See gen_tolerance_list match_method enum corresponds three matching methods discussed : \"with_replacement\" Finds smallest control treatment \"greedy\" Greedily generates pairs. Note order choosing greedy pairs random, possible solution. \"optimal\" Minimum total distance n_sinks Vector sinks per match. Note match_method: \"with_replacement\" \"greedy\", subtracts one pair. optimal matching, removes one full unit. \"greedy\" weird one , truly make sense given code try replicate optimal implementation. safe use greedy... keep_all_with_replacement logical, default FALSE. nbp matching replacement, can cases form nearly many pairs units (using tolerance vec, maybe lowest value pairs, since control unit). form contrast methods, cut using half default. weight_vec Default NULL: optionally supply weight vector used generate dist_mat 'll returned match_list generated function","code":""},{"path":"/reference/nonbipartite_matches.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generating nonbipartite matched pairs — nonbipartite_matches","text":"basic return value list three elements: treat_index index treated units control_index index control units distance distances pairs get list objects, extra element: number sinks used. n_sinks NULL, 'll default using single value: zero.","code":""},{"path":"/reference/nonbipartite_matches.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generating nonbipartite matched pairs — nonbipartite_matches","text":"NOTE: sinks - optimal match gives \"half\" number sinks might expect. pool 400 matchable things, NBP gives 200 matches sinks. say sinks = 20 OPTIMAL, get 190 matches, 180. leave behaviour algorithm can generate expected results someone used nbpmatch , note allow equality tolerance vector used.","code":""},{"path":"/reference/nonbipartite_matches.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generating nonbipartite matched pairs — nonbipartite_matches","text":"Colman Humphrey","code":""},{"path":"/reference/optimal_match.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes optimal matches, bipartite — optimal_match","title":"Computes optimal matches, bipartite — optimal_match","text":"Computes optimal matches, bipartite","code":""},{"path":"/reference/optimal_match.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes optimal matches, bipartite — optimal_match","text":"","code":"optimal_match(dist_mat, treat_vec, n_sinks = 0, tol_val = 0.0001)"},{"path":"/reference/optimal_match.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes optimal matches, bipartite — optimal_match","text":"dist_mat Matrix pairwise distances. treat_vec Vector representing subjects; 0 control, 1 treated. n_sinks single value tol_val tolerance solving optimal matches - far acceptable true optimal value? Speed large value, accuracy small. relevant !with_replacement && !greedy. Default 1e-4 reasonable many cases.","code":""},{"path":"/reference/optimal_nbp_sink_wrap.html","id":null,"dir":"Reference","previous_headings":"","what":"Given a vector of sink values, produces optimal NBP matches for each — optimal_nbp_sink_wrap","title":"Given a vector of sink values, produces optimal NBP matches for each — optimal_nbp_sink_wrap","text":"Given vector sink values, produces optimal NBP matches ","code":""},{"path":"/reference/optimal_nbp_sink_wrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Given a vector of sink values, produces optimal NBP matches for each — optimal_nbp_sink_wrap","text":"","code":"optimal_nbp_sink_wrap(   dist_mat,   tolerance_vec,   n_sinks = NULL,   weight_vec = NULL )"},{"path":"/reference/optimal_nbp_sink_wrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Given a vector of sink values, produces optimal NBP matches for each — optimal_nbp_sink_wrap","text":"dist_mat Matrix pairwise distances. n_sinks Vector sinks per match. Note match_method: \"with_replacement\" \"greedy\", subtracts one pair. optimal matching, removes one full unit. \"greedy\" weird one , truly make sense given code try replicate optimal implementation. safe use greedy... weight_vec Default NULL: optionally supply weight vector used generate dist_mat 'll returned match_list generated function","code":""},{"path":"/reference/optimal_nbp_sink_wrap.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Given a vector of sink values, produces optimal NBP matches for each — optimal_nbp_sink_wrap","text":"Colman Humphrey","code":""},{"path":"/reference/optimal_sink_wrap.html","id":null,"dir":"Reference","previous_headings":"","what":"Given a vector of sink values, generates an optimal match\nfor each. — optimal_sink_wrap","title":"Given a vector of sink values, generates an optimal match\nfor each. — optimal_sink_wrap","text":"slow; just generate one match subset .","code":""},{"path":"/reference/optimal_sink_wrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Given a vector of sink values, generates an optimal match\nfor each. — optimal_sink_wrap","text":"","code":"optimal_sink_wrap(dist_mat, treat_vec, n_sinks, tol_val, weight_vec = NULL)"},{"path":"/reference/optimal_sink_wrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Given a vector of sink values, generates an optimal match\nfor each. — optimal_sink_wrap","text":"dist_mat Matrix pairwise distances. treat_vec Vector representing subjects; 0 control, 1 treated. n_sinks default NULL, vector sink values use. tol_val tolerance solving optimal matches - far acceptable true optimal value? Speed large value, accuracy small. relevant !with_replacement && !greedy. Default 1e-4 reasonable many cases. weight_vec Default NULL: optionally supply weight vector used generate dist_mat 'll returned match_list generated function","code":""},{"path":"/reference/optimal_sink_wrap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Given a vector of sink values, generates an optimal match\nfor each. — optimal_sink_wrap","text":"list lists; see parent function","code":""},{"path":"/reference/optimal_sink_wrap.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Given a vector of sink values, generates an optimal match\nfor each. — optimal_sink_wrap","text":"Colman Humphrey","code":""},{"path":"/reference/pair_indexing.html","id":null,"dir":"Reference","previous_headings":"","what":"Builds symmetric pairs of indices for vectors — pair_indexing","title":"Builds symmetric pairs of indices for vectors — pair_indexing","text":"given vector interpreted indices, e.g. c(5, 10, 13), want possible pairs element, e.g. want c(5, 10), c(5, 13) c(10, 13). , want orders, combined matrix. Finally, want multiple vectors list, single final matrix output.","code":""},{"path":"/reference/pair_indexing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Builds symmetric pairs of indices for vectors — pair_indexing","text":"","code":"pair_indexing(index_list)"},{"path":"/reference/pair_indexing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Builds symmetric pairs of indices for vectors — pair_indexing","text":"index_list List vectors, interpreted index locations","code":""},{"path":"/reference/pair_indexing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Builds symmetric pairs of indices for vectors — pair_indexing","text":"Matrix pairs","code":""},{"path":"/reference/pair_indexing.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Builds symmetric pairs of indices for vectors — pair_indexing","text":"Colman Humphrey","code":""},{"path":"/reference/paper_mean_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates the four different mean functions we use\nfor simulations in the paper. — paper_mean_functions","title":"Generates the four different mean functions we use\nfor simulations in the paper. — paper_mean_functions","text":"make mean zero real reason, really care mean .","code":""},{"path":"/reference/paper_mean_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates the four different mean functions we use\nfor simulations in the paper. — paper_mean_functions","text":"","code":"paper_mean_functions()"},{"path":"/reference/paper_mean_functions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates the four different mean functions we use\nfor simulations in the paper. — paper_mean_functions","text":"List four functions take matrix output vector means: constant_mu Vector zeroes linear_mu matrix multiplied random vector. sign_mu Literally sign(x_mat[, 1]) non_linear_mu Messy non-linear function data matrix","code":""},{"path":"/reference/paper_mean_functions.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generates the four different mean functions we use\nfor simulations in the paper. — paper_mean_functions","text":"Colman Humphrey","code":""},{"path":"/reference/paper_treatment_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates the four different treatment functions we use\nfor simulations in the paper. — paper_treatment_functions","title":"Generates the four different treatment functions we use\nfor simulations in the paper. — paper_treatment_functions","text":"Generates four different treatment functions use simulations paper.","code":""},{"path":"/reference/paper_treatment_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates the four different treatment functions we use\nfor simulations in the paper. — paper_treatment_functions","text":"","code":"paper_treatment_functions(target_mean = 0.425)"},{"path":"/reference/paper_treatment_functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates the four different treatment functions we use\nfor simulations in the paper. — paper_treatment_functions","text":"target_mean Desired mean treatment probabilities, (0, 1).","code":""},{"path":"/reference/paper_treatment_functions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates the four different treatment functions we use\nfor simulations in the paper. — paper_treatment_functions","text":"List four functions take matrix output vector probabilities: constant_treat_prob Just repeats target_mean logistic_treat_prob Computes logistic style relationship data matrix output vector sparse_treat_prob Based sign first data matrix column; gives number bit mean bit . sparse_nonlin_treat_prob Cubic logit function first vector","code":""},{"path":"/reference/paper_treatment_functions.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generates the four different treatment functions we use\nfor simulations in the paper. — paper_treatment_functions","text":"Colman Humphrey","code":""},{"path":"/reference/parallel_sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Run compute_sim_result in parallel using parallel::mclapply — parallel_sim","title":"Run compute_sim_result in parallel using parallel::mclapply — parallel_sim","text":"Run compute_sim_result parallel using parallel::mclapply","code":""},{"path":"/reference/parallel_sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run compute_sim_result in parallel using parallel::mclapply — parallel_sim","text":"","code":"parallel_sim(   x_generator = default_x_generator,   treat_prob_generator,   mean_generator,   error_generator = default_error_generator,   n_sink_gen = n_sink_generator(),   match_method = \"with_replacement\",   n_rows = 500L,   n_cols = 5L,   num_weight_vectors = 100L,   num_cores = parallel::detectCores() - 1,   iterations = 100L,   names_list = NULL,   silent = !interactive() )"},{"path":"/reference/parallel_sim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run compute_sim_result in parallel using parallel::mclapply — parallel_sim","text":"x_generator Function takes number rows columns produces data matrix dimension. treat_prob_generator Function takes matrix produces treatment probabilities. mean_generator Function takes matrix produces expected value row. error_generator Function accepts number rows generates error vector (e.g. generates normal noise). generate zero-mean data. n_sink_gen Default n_sink_generator, probably want use : argument function accepts treat_vec produces vector sink numbers. n_rows many rows generate. n_cols many columns use. num_weight_vectors many weight vectors generate. num_cores many cores use. iterations many iterations . silent Default !interactive(), want suppress messages.","code":""},{"path":"/reference/parallel_sim.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Run compute_sim_result in parallel using parallel::mclapply — parallel_sim","text":"Colman Humphrey","code":""},{"path":"/reference/permutation_brier.html","id":null,"dir":"Reference","previous_headings":"","what":"For a given match, computes the brier score distribution\nif the pairing were truly random — permutation_brier","title":"For a given match, computes the brier score distribution\nif the pairing were truly random — permutation_brier","text":"Works bipartite non-bipartite, since just switches labels within pairs.","code":""},{"path":"/reference/permutation_brier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"For a given match, computes the brier score distribution\nif the pairing were truly random — permutation_brier","text":"","code":"permutation_brier(   x_mat,   match_list,   design = \"cross_all\",   use_cv = TRUE,   num_permutations = 100L,   match_predict_function = match_predict_xgb(),   num_folds = 5,   train_fraction = 0.7 )"},{"path":"/reference/permutation_brier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"For a given match, computes the brier score distribution\nif the pairing were truly random — permutation_brier","text":"x_mat typical input matrix match_list match result design see predict_prepare use_cv logical, default TRUE: use CV get briers? Else split. num_permutations many permutations match_predict_function function predict treated units num_folds using CV, many folds? train_fraction using split, fraction train?","code":""},{"path":"/reference/permutation_brier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"For a given match, computes the brier score distribution\nif the pairing were truly random — permutation_brier","text":"vector brier scores random pairings","code":""},{"path":"/reference/permutation_brier.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"For a given match, computes the brier score distribution\nif the pairing were truly random — permutation_brier","text":"Colman Humphrey","code":""},{"path":"/reference/permutation_matches.html","id":null,"dir":"Reference","previous_headings":"","what":"Takes matches and their Brier scores, and computes\npermutation Brier scores and the best matches — permutation_matches","title":"Takes matches and their Brier scores, and computes\npermutation Brier scores and the best matches — permutation_matches","text":"Can work bipartite non-bipartite matches, permutation just labels.","code":""},{"path":"/reference/permutation_matches.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Takes matches and their Brier scores, and computes\npermutation Brier scores and the best matches — permutation_matches","text":"","code":"permutation_matches(   matches_by_sinks,   briers_by_sinks,   x_mat,   n_sinks = 0L,   approximate_by_best = TRUE,   silent = !interactive() )"},{"path":"/reference/permutation_matches.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Takes matches and their Brier scores, and computes\npermutation Brier scores and the best matches — permutation_matches","text":"matches_by_sinks List number sinks, list match results (match list), weight vector. briers_by_sinks List number sinks, vector Brier results. Basically number match matches_by_sinks. x_mat Typical input matrix n_sinks Vector number sinks - probably get directly matches_by_sinks, nice explicit. approximate_by_best Logical, default TRUE. compute one permutation distribution, using best result brier score . Useful changes little, saves ton time. silent want suppress message output? Default !interactive().","code":""},{"path":"/reference/permutation_matches.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Takes matches and their Brier scores, and computes\npermutation Brier scores and the best matches — permutation_matches","text":"Returns list two lists. first vectors permutation Brier scores (one per match). second best match sink value, along extra info match.","code":""},{"path":"/reference/permutation_matches.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Takes matches and their Brier scores, and computes\npermutation Brier scores and the best matches — permutation_matches","text":"Colman Humphrey","code":""},{"path":"/reference/plot_sims.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting simulation results. Plan: four plots, one for each N value — plot_sims","title":"Plotting simulation results. Plan: four plots, one for each N value — plot_sims","text":"Plotting simulation results. Plan: four plots, one N value","code":""},{"path":"/reference/plot_sims.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting simulation results. Plan: four plots, one for each N value — plot_sims","text":"","code":"plot_sims(all_results, y_rel = c(0.1, 0.4))"},{"path":"/reference/plot_sims.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting simulation results. Plan: four plots, one for each N value — plot_sims","text":"all_results result generate_plot_list y_rel limit y (length two vector)","code":""},{"path":"/reference/plot_sims.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plotting simulation results. Plan: four plots, one for each N value — plot_sims","text":"Nothing, just plots device","code":""},{"path":"/reference/plot_sims.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plotting simulation results. Plan: four plots, one for each N value — plot_sims","text":"Colman Humphrey","code":""},{"path":"/reference/predict_prepare.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepares design matrices and other inputs needed for predictive methods — predict_prepare","title":"Prepares design matrices and other inputs needed for predictive methods — predict_prepare","text":"immediately clear take match (set matched pairs) \"predict\" - essentially likely want prediction function \\(f(x, y) -> {0, 1}\\) (\\(P(1)\\) etc) \\(x\\) \\(y\\) rows, one treated control. function also property resembling: $$f(x, y) = 1 - f(y, x)$$ since inherent symmetry pairs: knew two came first, 'd nothing . fact, definition \\(f\\) likely predict (WLOG) \\(x\\) treated unit .","code":""},{"path":"/reference/predict_prepare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepares design matrices and other inputs needed for predictive methods — predict_prepare","text":"","code":"predict_prepare(   x_mat,   index_list,   design = c(\"cross_all\", \"cross_random\", \"differences_random\", \"differences_plain\") )"},{"path":"/reference/predict_prepare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepares design matrices and other inputs needed for predictive methods — predict_prepare","text":"x_mat original data, .e. row unit index_list list indices use matching: treat_train Index treated units training matrix control_train Index control units training matrix treat_test Index treated units test matrix control_test Index control units test matrix design design matrix form want use. assume x_mat \\(n \\times k\\). Let \\(X_c\\) rows x_mat corresponding control units, \\(X_t\\) treated units pair \\(X_c\\) (.e. \\(^{\\text{th}}\\) matched pair correspond \\(^{\\text{th}}\\) row ), thus matrix dimension \\(m \\times k\\), \\(2m \\leq n\\). \"cross_all\" form \\(2m \\times 2k\\) matrix, matched pair give two rows design matrix: two rows contain full treated row given pair along full control row, one row pair (treated, control), (control, treated). two rows, output vector contain 1 0 respectively. construct following inputs: $$X =     \\begin{bmatrix}     X_t& X_c \\\\     X_c& X_t \\\\     \\end{bmatrix}, Y = [1 1 \\ldots 1 0 0 \\ldots 0]'   $$ test data, (WLOG less) give (treat, control) version, consistency evaluation. \"cross_random\" similar , except instead forming rows ways, choose (pair) (treated, control) (control, treated) randomly. $$Y_i =   \\begin{cases}   1 & \\text{probability} 0.5 \\\\   0 & \\text{probability} 0.5   \\end{cases}$$ (\\(X_i\\) meaning \\(^{\\text{th}}\\) row design matrix): $$X_i =   \\begin{cases}   ((X_t)_i, (X_c)_i) & Y_i = 1 \\\\   ((X_c)_i, (X_t)_i) & Y_i = 0   \\end{cases}$$ Giving \\(m \\times 2k\\) design matrix. \"differences_random\" pair, design row row x_mat corresponding one unit minus row corresponding . Similar , choose outcome randomly decide unit subtracted based , end \\(m \\times k\\) matrix. : $$Y_i =   \\begin{cases}   1 & \\text{probability} 0.5 \\\\   0 & \\text{probability} 0.5   \\end{cases}$$ : $$X_i =   \\begin{cases}   (X_t)_i - (X_c)_i & Y_i = 1 \\\\   (X_c)_i - (X_t)_i & Y_i = 0   \\end{cases}$$ Note x_mat contains intercept, 'll now column zeroes. \"differences_plain\" cases, may wish differences add customization. essentially \\(Y_i = 1\\) \\(\\), therefore differences returned \\((X_t)_i - (X_c)_i\\) (also \\(m \\times k\\)).","code":""},{"path":"/reference/predict_prepare.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepares design matrices and other inputs needed for predictive methods — predict_prepare","text":"list: x_train Design matrix training x_test Design matrix testing y_train Training outcome vector y_test Test outcome vector","code":""},{"path":"/reference/predict_prepare.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepares design matrices and other inputs needed for predictive methods — predict_prepare","text":"function gives various potential design matrix shapes corresponding output vectors can used solve prediction problem. scenarios (e.g. content use linear models), differences alone might appropriate. full generality, may wish use full vectors.","code":""},{"path":"/reference/predict_prepare.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Prepares design matrices and other inputs needed for predictive methods — predict_prepare","text":"Colman Humphrey","code":""},{"path":"/reference/propensity_bipartite_matches.html","id":null,"dir":"Reference","previous_headings":"","what":"Propensity match for (default) bipartite — propensity_bipartite_matches","title":"Propensity match for (default) bipartite — propensity_bipartite_matches","text":"Propensity match (default) bipartite","code":""},{"path":"/reference/propensity_bipartite_matches.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Propensity match for (default) bipartite — propensity_bipartite_matches","text":"","code":"propensity_bipartite_matches(   x_mat,   treat_vec,   match_method = c(\"with_replacement\", \"optimal\", \"greedy\"),   propensity_list = gen_propensity_list(),   n_sinks = 0,   caliper_list = gen_caliper_list(),   sqrt_mahal = TRUE,   tol_val = NULL )"},{"path":"/reference/propensity_bipartite_matches.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Propensity match for (default) bipartite — propensity_bipartite_matches","text":"x_mat input/design matrix (already rank-adjusted etc) treat_vec Logical (1/0) vector, indicating treatment (control). propensity_list See gen_propensity_list n_sinks many potential matches bother NOTE: can vector, optimal matching. caliper_list Optional, see gen_caliper_list. Provide force matches close metric. tol_val optimal matches, can set tolerance within optimality , can zero perfect optimality. Default 1e-4 reasonable many cases.","code":""},{"path":"/reference/propensity_nonbipartite_matches.html","id":null,"dir":"Reference","previous_headings":"","what":"Propensity match for nbp — propensity_nonbipartite_matches","title":"Propensity match for nbp — propensity_nonbipartite_matches","text":"Propensity match nbp","code":""},{"path":"/reference/propensity_nonbipartite_matches.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Propensity match for nbp — propensity_nonbipartite_matches","text":"","code":"propensity_nonbipartite_matches(   x_mat,   tolerance_list = gen_tolerance_list(),   propensity_list = gen_propensity_list(),   match_method = c(\"with_replacement\", \"optimal\", \"greedy\"),   n_sinks = 0,   caliper_list = gen_caliper_list(),   sqrt_mahal = TRUE,   keep_all_with_replacement = FALSE )"},{"path":"/reference/propensity_nonbipartite_matches.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Propensity match for nbp — propensity_nonbipartite_matches","text":"x_mat input/design matrix (already rank-adjusted etc) tolerance_list See gen_tolerance_list propensity_list See gen_propensity_list match_method enum corresponds three matching methods discussed : \"with_replacement\" Finds smallest control treatment \"greedy\" Greedily generates pairs. Note order choosing greedy pairs random, possible solution. \"optimal\" Minimum total distance n_sinks many potential matches bother NOTE: can vector, optimal matching. caliper_list Optional, see gen_caliper_list. Provide force matches close metric. keep_all_with_replacement logical, default FALSE. nbp matching replacement, can cases form nearly many pairs units (using tolerance vec, maybe lowest value pairs, since control unit). form contrast methods, cut using half default.","code":""},{"path":"/reference/propensity_score.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates propensity scores for a given matrix and treatment vector — propensity_score","title":"Calculates propensity scores for a given matrix and treatment vector — propensity_score","text":"function takes input matrix treatment vector, along function makes predictions (default xgboost method given) returns predicted probability treatment unit, either using -sample --sample fits.","code":""},{"path":"/reference/propensity_score.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates propensity scores for a given matrix and treatment vector — propensity_score","text":"","code":"propensity_score(x_mat, treat_vec, propensity_list = gen_propensity_list())"},{"path":"/reference/propensity_score.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates propensity scores for a given matrix and treatment vector — propensity_score","text":"x_mat Standard input matrix (already rank adjusted). treat_vec Usual 0/1 treatment vector. propensity_list See gen_propensity_list","code":""},{"path":"/reference/propensity_score.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates propensity scores for a given matrix and treatment vector — propensity_score","text":"Returns vector equal length treat_vec propensity. score.","code":""},{"path":"/reference/propensity_score.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculates propensity scores for a given matrix and treatment vector — propensity_score","text":"Colman Humphrey","code":""},{"path":"/reference/propensity_score_linear.html","id":null,"dir":"Reference","previous_headings":"","what":"Function factory to predict treatment using glm (binomial)\nor lm — propensity_score_linear","title":"Function factory to predict treatment using glm (binomial)\nor lm — propensity_score_linear","text":"simple wrap around glm / lm returned function accepts one parameter, train_test_list, list x_train, x_test, y_train, y_test","code":""},{"path":"/reference/propensity_score_linear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function factory to predict treatment using glm (binomial)\nor lm — propensity_score_linear","text":"","code":"propensity_score_linear(use_linear_lm = FALSE)"},{"path":"/reference/propensity_score_linear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function factory to predict treatment using glm (binomial)\nor lm — propensity_score_linear","text":"returns function accepts train_test_list returns vector predictions test data","code":""},{"path":"/reference/propensity_score_linear.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Function factory to predict treatment using glm (binomial)\nor lm — propensity_score_linear","text":"Colman Humphrey","code":""},{"path":"/reference/propensity_score_xgb.html","id":null,"dir":"Reference","previous_headings":"","what":"Function factory to predict treatment using xgboost — propensity_score_xgb","title":"Function factory to predict treatment using xgboost — propensity_score_xgb","text":"operates exact match_predict_xgb, quite simple wrap regular xgboost code. Main difference input data even simpler. returned function accepts one parameter, train_test_list, list x_train, x_test, y_train, y_test","code":""},{"path":"/reference/propensity_score_xgb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function factory to predict treatment using xgboost — propensity_score_xgb","text":"","code":"propensity_score_xgb(   nrounds = 50,   nthread = 1,   params = list(eta = 0.1, max.depth = 3),   ... )"},{"path":"/reference/propensity_score_xgb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function factory to predict treatment using xgboost — propensity_score_xgb","text":"nrounds training rounds xgb algorithm nthread threads use fitting, default 1... params list params pass xgboost, likely something like eta max.depth","code":""},{"path":"/reference/propensity_score_xgb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function factory to predict treatment using xgboost — propensity_score_xgb","text":"returns function accepts train_test_list returns vector predictions test data","code":""},{"path":"/reference/propensity_score_xgb.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Function factory to predict treatment using xgboost — propensity_score_xgb","text":"Colman Humphrey","code":""},{"path":"/reference/rank_integer_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts rank_cols in all allowed forms to an integer index — rank_integer_index","title":"Converts rank_cols in all allowed forms to an integer index — rank_integer_index","text":"Takes ranked cols, either given integer (numeric fine) index; logical index; named. Converts integer index","code":""},{"path":"/reference/rank_integer_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts rank_cols in all allowed forms to an integer index — rank_integer_index","text":"","code":"rank_integer_index(rank_cols, x_mat)"},{"path":"/reference/rank_integer_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts rank_cols in all allowed forms to an integer index — rank_integer_index","text":"rank_cols integer/number, logical, names within colnames(x_mat) x_mat x matrix interest","code":""},{"path":"/reference/rank_integer_index.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Converts rank_cols in all allowed forms to an integer index — rank_integer_index","text":"Colman Humphrey","code":""},{"path":"/reference/ranked_x.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts indicated columns to ranked versions of themselves — ranked_x","title":"Converts indicated columns to ranked versions of themselves — ranked_x","text":"function takes numeric matrix converts columns indicated rank_cols input ranks (break ties however want), scaled nrow(x_mat).","code":""},{"path":"/reference/ranked_x.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts indicated columns to ranked versions of themselves — ranked_x","text":"","code":"ranked_x(x_mat, rank_cols = NULL, ties_method = \"average\")"},{"path":"/reference/ranked_x.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts indicated columns to ranked versions of themselves — ranked_x","text":"x_mat numeric matrix (adjust non-numeric columns prior) rank_cols names index columns converted ranks analysis ties_method break ties ranks, default uses \"average\" (rank function's default). See ?rank options","code":""},{"path":"/reference/ranked_x.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts indicated columns to ranked versions of themselves — ranked_x","text":"x_mat , potentially adjusted ranks","code":""},{"path":"/reference/ranked_x.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Converts indicated columns to ranked versions of themselves — ranked_x","text":"Colman Humphrey","code":""},{"path":"/reference/regression_eval.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate match using regression — regression_eval","title":"Evaluate match using regression — regression_eval","text":"Generates list estimated treatment effect, standard error effect. bipartite (.e. tolerance used) just regresses differences y_vector intercept, basically difference means. tolerance vector used, differences regressed tolerance differences. cases, controls repeated, build appropriate correlation matrix use Generalised Linear Regression solve.","code":""},{"path":"/reference/regression_eval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate match using regression — regression_eval","text":"","code":"regression_eval(match_list, y_vector, tolerance_list = gen_tolerance_list())"},{"path":"/reference/regression_eval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate match using regression — regression_eval","text":"match_list Usual match list y_vector Usual outcome vector tolerance_list Usual tolerance list","code":""},{"path":"/reference/regression_eval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate match using regression — regression_eval","text":"Returns list: estimate: estimated treatment effect. bipartite land, usual difference means, else effect \"unit\" change tolerance standard_error: standard deviation coefficient","code":""},{"path":"/reference/regression_eval.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Evaluate match using regression — regression_eval","text":"Colman Humphrey","code":""},{"path":"/reference/reorder_nbp.html","id":null,"dir":"Reference","previous_headings":"","what":"Reorders list first by treat index, then within pairs by\nhighest tol val if given — reorder_nbp","title":"Reorders list first by treat index, then within pairs by\nhighest tol val if given — reorder_nbp","text":"Reorders list first treat index, within pairs highest tol val given","code":""},{"path":"/reference/reorder_nbp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reorders list first by treat index, then within pairs by\nhighest tol val if given — reorder_nbp","text":"","code":"reorder_nbp(match_list, tolerance_vec = NULL)"},{"path":"/reference/reshape_list_of_sims.html","id":null,"dir":"Reference","previous_headings":"","what":"Reshapes a list of simulations to a nice dataframe — reshape_list_of_sims","title":"Reshapes a list of simulations to a nice dataframe — reshape_list_of_sims","text":"future cleaner","code":""},{"path":"/reference/reshape_list_of_sims.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reshapes a list of simulations to a nice dataframe — reshape_list_of_sims","text":"","code":"reshape_list_of_sims(   list_of_sims,   treat_model_name,   mu_model_name,   n_rows,   n_cols,   num_weight_vectors )"},{"path":"/reference/reshape_list_of_sims.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reshapes a list of simulations to a nice dataframe — reshape_list_of_sims","text":"list_of_sims List results compute_sim_results. treat_model_name Name treatment model. mu_model_name Name mean generation model. n_rows many rows used. n_cols many columns used. num_weight_vectors many weight vectors used","code":""},{"path":"/reference/reshape_list_of_sims.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reshapes a list of simulations to a nice dataframe — reshape_list_of_sims","text":"Data frame spreading results...","code":""},{"path":"/reference/reshape_list_of_sims.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Reshapes a list of simulations to a nice dataframe — reshape_list_of_sims","text":"Colman Humphrey","code":""},{"path":"/reference/reshape_p_cut_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Reshapes a list of simulations to a nice dataframe, by p-cut — reshape_p_cut_list","title":"Reshapes a list of simulations to a nice dataframe, by p-cut — reshape_p_cut_list","text":"Reshapes list simulations nice dataframe, p-cut","code":""},{"path":"/reference/reshape_p_cut_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reshapes a list of simulations to a nice dataframe, by p-cut — reshape_p_cut_list","text":"","code":"reshape_p_cut_list(   list_of_sims,   treat_model_name,   mu_model_name,   p_cut,   n_rows,   n_cols,   num_weight_vectors )"},{"path":"/reference/reshape_p_cut_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reshapes a list of simulations to a nice dataframe, by p-cut — reshape_p_cut_list","text":"list_of_sims List results compute_sim_results. treat_model_name Name treatment model. mu_model_name Name mean generation model. p_cut Vector one-sided permution p-values use. n_rows many rows used. n_cols many columns used. num_weight_vectors many weight vectors used","code":""},{"path":"/reference/reshape_p_cut_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reshapes a list of simulations to a nice dataframe, by p-cut — reshape_p_cut_list","text":"Data frame spreading results...","code":""},{"path":"/reference/reshape_p_cut_list.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Reshapes a list of simulations to a nice dataframe, by p-cut — reshape_p_cut_list","text":"Colman Humphrey","code":""},{"path":"/reference/rmse_from_one_func.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates RMSE with a known target of one — rmse_from_one_func","title":"Calculates RMSE with a known target of one — rmse_from_one_func","text":"Calculates RMSE known target one","code":""},{"path":"/reference/rmse_from_one_func.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates RMSE with a known target of one — rmse_from_one_func","text":"","code":"rmse_from_one_func(vec)"},{"path":"/reference/rmse_from_one_func.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates RMSE with a known target of one — rmse_from_one_func","text":"vec Vector estimates around 1.","code":""},{"path":"/reference/rmse_from_one_func.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates RMSE with a known target of one — rmse_from_one_func","text":"Returns single number: RMSE","code":""},{"path":"/reference/rmse_from_one_func.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculates RMSE with a known target of one — rmse_from_one_func","text":"Colman Humphrey","code":""},{"path":"/reference/simple_sink_wrap.html","id":null,"dir":"Reference","previous_headings":"","what":"Wraps a match_list from a simple match result and slices off\nvarious numbers of sinks — simple_sink_wrap","title":"Wraps a match_list from a simple match result and slices off\nvarious numbers of sinks — simple_sink_wrap","text":"Note with_replacement matching, right thing , greedy matching random ordering obviously correct, give nice property sinks = lower distances.","code":""},{"path":"/reference/simple_sink_wrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wraps a match_list from a simple match result and slices off\nvarious numbers of sinks — simple_sink_wrap","text":"","code":"simple_sink_wrap(simple_match_list, n_sinks = NULL, weight_vec = NULL)"},{"path":"/reference/simple_sink_wrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wraps a match_list from a simple match result and slices off\nvarious numbers of sinks — simple_sink_wrap","text":"simple_match_list match result one with_replacement_match, greedy_match, with_replacement_nbp_match greedy_nbp_match. n_sinks default NULL, vector sink values use. weight_vec Default NULL: optionally supply weight vector used generate dist_mat 'll returned match_list generated function","code":""},{"path":"/reference/simple_sink_wrap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wraps a match_list from a simple match result and slices off\nvarious numbers of sinks — simple_sink_wrap","text":"list lists; see parent function","code":""},{"path":"/reference/simple_sink_wrap.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Wraps a match_list from a simple match result and slices off\nvarious numbers of sinks — simple_sink_wrap","text":"Colman Humphrey","code":""},{"path":"/reference/swap_pairs.html","id":null,"dir":"Reference","previous_headings":"","what":"Given a logical swap vector, switches treated and control units around — swap_pairs","title":"Given a logical swap vector, switches treated and control units around — swap_pairs","text":"Given logical swap vector, switches treated control units around","code":""},{"path":"/reference/swap_pairs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Given a logical swap vector, switches treated and control units around — swap_pairs","text":"","code":"swap_pairs(match_list, swap)"},{"path":"/reference/swap_pairs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Given a logical swap vector, switches treated and control units around — swap_pairs","text":"match_list typical match_list entity swap logical vector indicating pairs swap","code":""},{"path":"/reference/swap_pairs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Given a logical swap vector, switches treated and control units around — swap_pairs","text":"another match_list, now swapped pairs","code":""},{"path":"/reference/swap_pairs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Given a logical swap vector, switches treated and control units around — swap_pairs","text":"Colman Humphrey","code":""},{"path":"/reference/sym_mat.html","id":null,"dir":"Reference","previous_headings":"","what":"Symmetrises a matrix in a boring way, and zeros the diag — sym_mat","title":"Symmetrises a matrix in a boring way, and zeros the diag — sym_mat","text":"useful generating pairwise distance matrices","code":""},{"path":"/reference/sym_mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Symmetrises a matrix in a boring way, and zeros the diag — sym_mat","text":"","code":"sym_mat(mat)"},{"path":"/reference/sym_mat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Symmetrises a matrix in a boring way, and zeros the diag — sym_mat","text":"mat matrix","code":""},{"path":"/reference/target_mean_expit.html","id":null,"dir":"Reference","previous_headings":"","what":"Shifts the linear component until the mean of the\nexpit is the target mean. — target_mean_expit","title":"Shifts the linear component until the mean of the\nexpit is the target mean. — target_mean_expit","text":"Shifts linear component mean expit target mean.","code":""},{"path":"/reference/target_mean_expit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shifts the linear component until the mean of the\nexpit is the target mean. — target_mean_expit","text":"","code":"target_mean_expit(target_mean, linear_vector)"},{"path":"/reference/target_mean_expit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shifts the linear component until the mean of the\nexpit is the target mean. — target_mean_expit","text":"target_mean Desired target mean. linear_vector Basically \\(X \\beta\\) (shift).","code":""},{"path":"/reference/target_mean_expit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shifts the linear component until the mean of the\nexpit is the target mean. — target_mean_expit","text":"expit(linear_vector + ) mean(expit(linear_vector + )) close target_mean.","code":""},{"path":"/reference/target_mean_expit.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Shifts the linear component until the mean of the\nexpit is the target mean. — target_mean_expit","text":"Colman Humphrey","code":""},{"path":"/reference/tol_random_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates a random pairing from a tolerance list in a naive way — tol_random_sample","title":"Generates a random pairing from a tolerance list in a naive way — tol_random_sample","text":"function takes tolerance list attempts generate \"simple\" match list naive random sampling.","code":""},{"path":"/reference/tol_random_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates a random pairing from a tolerance list in a naive way — tol_random_sample","text":"","code":"tol_random_sample(   tolerance_list,   prior_pairs = matrix(NA, nrow = 0L, ncol = 2L),   pairable_units = NULL,   iteration = 0L,   max_iterations = 10L,   verbose = FALSE )"},{"path":"/reference/tol_random_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates a random pairing from a tolerance list in a naive way — tol_random_sample","text":"tolerance_list Usual tol, see e.g. gen_tolerance_list prior_pairs use recursion - pairs already formed (indeed none first iteration) pairable_units use recursion - units available form pairs (NULL , hence first iteration) iteration iteration number max_iterations Max iterations verbose Boolean - spit extra messages / warnings?","code":""},{"path":"/reference/tol_random_sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates a random pairing from a tolerance list in a naive way — tol_random_sample","text":"\"Simple\" match list, list two elements: treat_index Treatment units control_index Control units","code":""},{"path":"/reference/tol_random_sample.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generates a random pairing from a tolerance list in a naive way — tol_random_sample","text":"Colman Humphrey","code":""},{"path":"/reference/tolerance_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Validates a match on a tolerance list — tolerance_check","title":"Validates a match on a tolerance list — tolerance_check","text":"Checks differences least min, max given, checks . Gives reasonable error messages errors","code":""},{"path":"/reference/tolerance_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validates a match on a tolerance list — tolerance_check","text":"","code":"tolerance_check(match_list, tolerance_list)"},{"path":"/reference/tolerance_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validates a match on a tolerance list — tolerance_check","text":"match_list Typical match_list object bipartite_matches. tolerance_list Typical tolerance list, see gen_tolerance_list","code":""},{"path":"/reference/tolerance_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validates a match on a tolerance list — tolerance_check","text":"List two elements: errorBoolean - good? messageIf error, gives error string","code":""},{"path":"/reference/tolerance_check.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Validates a match on a tolerance list — tolerance_check","text":"Colman Humphrey","code":""},{"path":"/reference/tolerance_to_caliper_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts tolerance list to caliper list — tolerance_to_caliper_list","title":"Converts tolerance list to caliper list — tolerance_to_caliper_list","text":"Converts tolerance list caliper list","code":""},{"path":"/reference/tolerance_to_caliper_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts tolerance list to caliper list — tolerance_to_caliper_list","text":"","code":"tolerance_to_caliper_list(tolerance_list, use_min = TRUE, continuous_mult = 1)"},{"path":"/reference/tolerance_to_caliper_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts tolerance list to caliper list — tolerance_to_caliper_list","text":"tolerance_list Result gen_tolerance_list use_min Logical, caliper max tolerance min? Use tolerance max . Default TRUE. continuous_mult value multiply differences caliper max. Set Inf infinite penalties, .e. block matches max.","code":""},{"path":"/reference/tolerance_to_caliper_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts tolerance list to caliper list — tolerance_to_caliper_list","text":"List gen_caliper_list","code":""},{"path":"/reference/tolerance_to_caliper_list.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Converts tolerance list to caliper list — tolerance_to_caliper_list","text":"Colman Humphrey","code":""},{"path":"/reference/unique_size_sub.html","id":null,"dir":"Reference","previous_headings":"","what":"Takes a subsample with a given number of unique elements — unique_size_sub","title":"Takes a subsample with a given number of unique elements — unique_size_sub","text":"Takes subsample given number unique elements","code":""},{"path":"/reference/unique_size_sub.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Takes a subsample with a given number of unique elements — unique_size_sub","text":"","code":"unique_size_sub(primary, unique)"},{"path":"/reference/unique_size_sub.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Takes a subsample with a given number of unique elements — unique_size_sub","text":"primary vector subsample unique many unique elements want","code":""},{"path":"/reference/unique_size_sub.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Takes a subsample with a given number of unique elements — unique_size_sub","text":"vector equal length primary, unique unique elements","code":""},{"path":"/reference/unique_size_sub.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Takes a subsample with a given number of unique elements — unique_size_sub","text":"Colman Humphrey","code":""},{"path":"/reference/weighted_mahal.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes weighted Mahalanobis distance, using Choleski decomp. — weighted_mahal","title":"Computes weighted Mahalanobis distance, using Choleski decomp. — weighted_mahal","text":"Note: def. weighted: \\(d(x_i, x_j) = (x_i - x_j)' W \\Sigma^{-1} W (x_i - x_j)\\) \\(W\\) = diag(weight_vec) R's cholesky gives \\(U\\) s.t. \\(U' U = S\\) (.e. \\(U = chol(S)\\)) general want: $$   (x_i - x_j)' W (U' U)^{-1} W (x_i - x_j) \\\\ = (x_i - x_j)' W U^{-1} (U')^{-1} W (x_i - x_j) \\\\ = x_i' W U^{-1} (U')^{-1} W x_i +   x_j' W U^{-1} (U')^{-1} W x_j \\\\   - 2 x_i' W U^{-1} (U')^{-1} W x_j $$ Solving manageable \\(y_i = (U')^{-1} W x_i\\) moving terms around, \\(W^{-1} U' y_i = x_i\\), simple forwardsolve. : $$dist(x_i, x_j) = ||y_i||^2 + ||y_j||^2 - 2 y_i' y_j$$ Letting \\(Y = (y_1', y_2', .... ,y_n')'\\) (can get one line, \\(Y' = \\) forwardsolve \\((W^{-1} U', x_mat')\\)) first two parts just rowSums\\((Y^2)\\) (note code uses \\(Y'\\), thus colSums) (add outer(.,.) finish) last \\(Y Y'\\)","code":""},{"path":"/reference/weighted_mahal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes weighted Mahalanobis distance, using Choleski decomp. — weighted_mahal","text":"","code":"weighted_mahal(   x_mat,   cov_x,   weight_vec = NULL,   treat_vec = NULL,   sqrt_mahal = TRUE,   partial_index = NULL )"},{"path":"/reference/weighted_mahal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes weighted Mahalanobis distance, using Choleski decomp. — weighted_mahal","text":"x_mat numeric matrix (adjust non-numeric columns prior), already rank-adjusted desired cov_x covariance x, calculated potentially ranks weight_vec vector weights corresponding columns x_mat, giving weights relative \"raw\" (ranked) Mahalanobis. Note resulting matrix depend scale weight vector, matching : scaling Mahalanobis matrix effect distance minimising pairs etc treat_vec optionally specify units treated. NULL (default), just return nrow(x_mat) x nrow(x_mat) distance matrix pairs. Can logicals \\({0, 1}\\) sqrt_mahal logical, default TRUE; want regular Mahalanobis: \\(d(x_i, x_j) = (x_i - x_j)' \\Sigma^{-1} (x_i - x_j)\\) square root? (weighted, \\(\\Sigma^{-1}\\) becomes \\(W \\Sigma^{-1} W\\) ) partial_index cases, want subset full N x N matrix, partition like want treat_vec. e.g. want full_dist[c(1, 2, 3), 1:10] use partial_index = list(c(1,2,3), 1:10)","code":""},{"path":"/reference/weighted_mahal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes weighted Mahalanobis distance, using Choleski decomp. — weighted_mahal","text":"returns matrix pairwise distances; relevant indexing depends treat_vec partial_index","code":""},{"path":"/reference/x_from_cov.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates a matrix where each row is generated\nwith covariance equal to cov_mat. — x_from_cov","title":"Generates a matrix where each row is generated\nwith covariance equal to cov_mat. — x_from_cov","text":"Generates matrix row generated covariance equal cov_mat.","code":""},{"path":"/reference/x_from_cov.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates a matrix where each row is generated\nwith covariance equal to cov_mat. — x_from_cov","text":"","code":"x_from_cov(cov_mat, n_rows)"},{"path":"/reference/x_from_cov.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates a matrix where each row is generated\nwith covariance equal to cov_mat. — x_from_cov","text":"cov_mat covariance desired. n_rows many rows produce.","code":""},{"path":"/reference/x_from_cov.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates a matrix where each row is generated\nwith covariance equal to cov_mat. — x_from_cov","text":"matrix covariance tend cov_mat n_rows grows.","code":""},{"path":"/reference/x_from_cov.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generates a matrix where each row is generated\nwith covariance equal to cov_mat. — x_from_cov","text":"Colman Humphrey","code":""},{"path":"/reference/y_tolerance_diff_ratio.html","id":null,"dir":"Reference","previous_headings":"","what":"Quick and dirty method to approximate the sd and mean\nof the ratio of the differences — y_tolerance_diff_ratio","title":"Quick and dirty method to approximate the sd and mean\nof the ratio of the differences — y_tolerance_diff_ratio","text":"non-bipartite work, work something like: $$     \\frac{y_{\\text{treat}} - y_{\\text{control}}}          {tol_{\\text{treat}} - tol_{\\text{control}}} $$ just \\(y_{\\text{treat}} - y_{\\text{control}}\\) \"difference\": say caring change \\(y\\) per unit tol. Note use regression estimate, really just statment error assumptions. function estimates standard deviation just random pairings obeyed tolerance rules min max. function computes approx sd optimal case. Also yes terrible function name.","code":""},{"path":"/reference/y_tolerance_diff_ratio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quick and dirty method to approximate the sd and mean\nof the ratio of the differences — y_tolerance_diff_ratio","text":"","code":"y_tolerance_diff_ratio(y_vector, tolerance_list, samples = NULL)"},{"path":"/reference/y_tolerance_diff_ratio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quick and dirty method to approximate the sd and mean\nof the ratio of the differences — y_tolerance_diff_ratio","text":"y_vector Vector outcomes care tolerance_list Usual tolerance list (see gen_tolerance_list) samples many samples use. Defaults number 50 200, depending length various vectors","code":""},{"path":"/reference/y_tolerance_diff_ratio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quick and dirty method to approximate the sd and mean\nof the ratio of the differences — y_tolerance_diff_ratio","text":"Returns single number: average sds samples random runs","code":""},{"path":"/reference/y_tolerance_diff_ratio.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Quick and dirty method to approximate the sd and mean\nof the ratio of the differences — y_tolerance_diff_ratio","text":"Colman Humphrey","code":""}]
